// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generatePaths pet paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { Pet, ApiResponse, Order, User } from \\"./definitions\\";

interface IPostPetParam {
    body: {
        body: Pet
        };
}

/**
 * Add a new pet to the store
 */
export function postPet(param: IPostPetParam) {

                const [ url, option ] = interceptRequest('/v2/pet', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

interface IPutPetParam {
    body: {
        body: Pet
        };
}

/**
 * Update an existing pet
 */
export function putPet(param: IPutPetParam) {

                const [ url, option ] = interceptRequest('/v2/pet', param)
                option.method = 'put'
                return fetch(url, option).then(interceptResponse)
              
}

interface IGetPetFindByStatusParam {
    query: {
        status: Array<'available' | 'pending' | 'sold'>
        };
}

type GetPetFindByStatusResponse = Array<Pet>
/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export function getPetFindByStatus(param: IGetPetFindByStatusParam) {

                const [ url, option ] = interceptRequest('/v2/pet/findByStatus', param)
                option.method = 'get'
                return fetch(url, option).then<GetPetFindByStatusResponse>(interceptResponse)
              
}

interface IGetPetPetIdParam {
    path: {
        petId: number
        };
}

/**
 * Find pet by ID
 * Returns a single pet
 */
export function getPetPetId(param: IGetPetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                option.method = 'get'
                return fetch(url, option).then<Pet>(interceptResponse)
              
}

interface IPostPetPetIdParam {
    path: {
        petId: number
        };
    formData?: {
        name?: string
        status?: string
        };
}

/**
 * Updates a pet in the store with form data
 */
export function postPetPetId(param: IPostPetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

interface IDeletePetPetIdParam {
    header?: {
        api_key?: string
        };
    path: {
        petId: number
        };
}

/**
 * Deletes a pet
 */
export function deletePetPetId(param: IDeletePetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                option.method = 'delete'
                return fetch(url, option).then(interceptResponse)
              
}

interface IPostPetPetIdUploadImageParam {
    path: {
        petId: number
        };
    formData?: {
        additionalMetadata?: string
        file?: File
        };
}

/**
 * uploads an image
 */
export function postPetPetIdUploadImage(param: IPostPetPetIdUploadImageParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId/uploadImage', param)
                option.method = 'post'
                return fetch(url, option).then<ApiResponse>(interceptResponse)
              
}

type GetStoreInventoryResponse = any
/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export function getStoreInventory() {

                const [ url, option ] = interceptRequest('/v2/store/inventory')
                option.method = 'get'
                return fetch(url, option).then<GetStoreInventoryResponse>(interceptResponse)
              
}

interface IPostStoreOrderParam {
    body: {
        body: Order
        };
}

/**
 * Place an order for a pet
 */
export function postStoreOrder(param: IPostStoreOrderParam) {

                const [ url, option ] = interceptRequest('/v2/store/order', param)
                option.method = 'post'
                return fetch(url, option).then<Order>(interceptResponse)
              
}

interface IGetStoreOrderOrderIdParam {
    path: {
        orderId: number
        };
}

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export function getStoreOrderOrderId(param: IGetStoreOrderOrderIdParam) {

                const [ url, option ] = interceptRequest('/v2/store/order/:orderId', param)
                option.method = 'get'
                return fetch(url, option).then<Order>(interceptResponse)
              
}

interface IDeleteStoreOrderOrderIdParam {
    path: {
        orderId: number
        };
}

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export function deleteStoreOrderOrderId(param: IDeleteStoreOrderOrderIdParam) {

                const [ url, option ] = interceptRequest('/v2/store/order/:orderId', param)
                option.method = 'delete'
                return fetch(url, option).then(interceptResponse)
              
}

interface IPostUserParam {
    body: {
        body: User
        };
}

/**
 * Create user
 * This can only be done by the logged in user.
 */
export function postUser(param: IPostUserParam) {

                const [ url, option ] = interceptRequest('/v2/user', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

interface IPostUserCreateWithArrayParam {
    body: {
        body: Array<User>
        };
}

/**
 * Creates list of users with given input array
 */
export function postUserCreateWithArray(param: IPostUserCreateWithArrayParam) {

                const [ url, option ] = interceptRequest('/v2/user/createWithArray', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

interface IPostUserCreateWithListParam {
    body: {
        body: Array<User>
        };
}

/**
 * Creates list of users with given input array
 */
export function postUserCreateWithList(param: IPostUserCreateWithListParam) {

                const [ url, option ] = interceptRequest('/v2/user/createWithList', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

interface IGetUserLoginParam {
    query: {
        username: string
        password: string
        };
}

type GetUserLoginResponse = string
/**
 * Logs user into the system
 */
export function getUserLogin(param: IGetUserLoginParam) {

                const [ url, option ] = interceptRequest('/v2/user/login', param)
                option.method = 'get'
                return fetch(url, option).then<GetUserLoginResponse>(interceptResponse)
              
}

/**
 * Logs out current logged in user session
 */
export function getUserLogout() {

                const [ url, option ] = interceptRequest('/v2/user/logout')
                option.method = 'get'
                return fetch(url, option).then(interceptResponse)
              
}

interface IGetUserUsernameParam {
    path: {
        username: string
        };
}

/**
 * Get user by user name
 */
export function getUserUsername(param: IGetUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                option.method = 'get'
                return fetch(url, option).then<User>(interceptResponse)
              
}

interface IPutUserUsernameParam {
    path: {
        username: string
        };
    body: {
        body: User
        };
}

/**
 * Updated user
 * This can only be done by the logged in user.
 */
export function putUserUsername(param: IPutUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                option.method = 'put'
                return fetch(url, option).then(interceptResponse)
              
}

interface IDeleteUserUsernameParam {
    path: {
        username: string
        };
}

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export function deleteUserUsername(param: IDeleteUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                option.method = 'delete'
                return fetch(url, option).then(interceptResponse)
              
}
"
`;

exports[`generatePaths projectA paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { ReplyVOPageVOAuditFlowListVO, ReplyVO, ReplyVOAuditFlowDeptFollowRuleDetailVO, ReplyVOPageVOBlackListVO, ReplyVOPageVODeptFollowRuleListVO, DeptFollowRuleAddUpdateDTO, ReplyVODeptFollowRuleEditVO, ReplyVOPageVOFollowPoolListVO, PoolIsAutoPubUpdateDTO, ManualAdjustPriceAddDTO, ReplyVOListPubPriceErrorVO, ReplyVOListOpponentVO, ReplyVOPromotionListVO, ReplyVOPageVOUserInputDataListVO, UserInputDataAddUpdateDTO, ReplyVOint, ReplyVOUserInputDataEditVO } from \\"./definitions\\";

interface IGetApiPricingAuditFlowParam {
    query?: {
        auditStatusList?: Array<number>
        createrList?: Array<string>
        };
}

/**
 * 分页查询【规则审批流】
 */
export function getApiPricingAuditFlow(param: IGetApiPricingAuditFlowParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOAuditFlowListVO>(interceptResponse)
              
}

interface IPostApiPricingAuditFlowApprovalParam {
    body?: {
        ids?: number
        };
}

/**
 * 批量审批通过
 */
export function postApiPricingAuditFlowApproval(param: IPostApiPricingAuditFlowApprovalParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/approval', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingAuditFlowRejectParam {
    body?: {
        ids?: number
        };
}

/**
 * 批量审批通过
 */
export function postApiPricingAuditFlowReject(param: IPostApiPricingAuditFlowRejectParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/reject', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingAuditFlowType1IdParam {
    path?: {
        id?: number
        };
}

/**
 * 查看审批流-部门跟价规则明细
 */
export function getApiPricingAuditFlowType1Id(param: IGetApiPricingAuditFlowType1IdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/type1/:id', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOAuditFlowDeptFollowRuleDetailVO>(interceptResponse)
              
}

interface IGetApiPricingBlackListParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        startIndex?: number
        };
}

/**
 * 分页查询【黑名单】
 */
export function getApiPricingBlackList(param: IGetApiPricingBlackListParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOBlackListVO>(interceptResponse)
              
}

interface IPostApiPricingBlackListAddParam {
    body?: {
        skuIds?: number
        };
}

/**
 * 批量添加sku到黑名单
 */
export function postApiPricingBlackListAdd(param: IPostApiPricingBlackListAddParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList/add', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingBlackListRemoveParam {
    body?: {
        skuIds?: number
        };
}

/**
 * 批量从黑名单移除sku
 */
export function postApiPricingBlackListRemove(param: IPostApiPricingBlackListRemoveParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList/remove', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingDeptFollowRuleParam {
    query: {
        auditStatus?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        startIndex?: number
        };
}

/**
 * 分页查询【部门跟价规则】
 */
export function getApiPricingDeptFollowRule(param: IGetApiPricingDeptFollowRuleParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVODeptFollowRuleListVO>(interceptResponse)
              
}

interface IPostApiPricingDeptFollowRuleParam {
    body?: {
        deptFollowRuleAddUpdateDTO?: DeptFollowRuleAddUpdateDTO
        };
}

/**
 * 保存【部门跟价规则】
 */
export function postApiPricingDeptFollowRule(param: IPostApiPricingDeptFollowRuleParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingDeptFollowRuleSubmitParam {
    body?: {
        deptFollowRuleAddUpdateDTO?: DeptFollowRuleAddUpdateDTO
        };
}

/**
 * 提交审批【部门跟价规则】
 */
export function postApiPricingDeptFollowRuleSubmit(param: IPostApiPricingDeptFollowRuleSubmitParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/submit', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingDeptFollowRuleValidRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 查看生效的【部门跟价规则】详情
 */
export function getApiPricingDeptFollowRuleValidRuleHeaderId(param: IGetApiPricingDeptFollowRuleValidRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/validRule/:headerId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVODeptFollowRuleEditVO>(interceptResponse)
              
}

interface IGetApiPricingDeptFollowRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 编辑【部门跟价规则】详情
 */
export function getApiPricingDeptFollowRuleHeaderId(param: IGetApiPricingDeptFollowRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/:headerId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVODeptFollowRuleEditVO>(interceptResponse)
              
}

interface IDeleteApiPricingDeptFollowRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 删除【部门跟价规则】
 */
export function deleteApiPricingDeptFollowRuleHeaderId(param: IDeleteApiPricingDeptFollowRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/:headerId', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingFollowPoolParam {
    query: {
        bandMode?: number
        bandType?: string
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        fixedBand?: string
        floorBand?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuFilterType?: string
        skuList?: Array<number>
        startIndex?: number
        upperBand?: number
        };
}

/**
 * 分页查询【跟价池】
 */
export function getApiPricingFollowPool(param: IGetApiPricingFollowPoolParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOFollowPoolListVO>(interceptResponse)
              
}

interface IPostApiPricingFollowPoolAddParam {
    body?: {
        skuIds?: number
        };
}

/**
 * 批量添加sku到跟价池
 */
export function postApiPricingFollowPoolAdd(param: IPostApiPricingFollowPoolAddParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/add', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingFollowPoolExportParam {
    query: {
        bandMode?: number
        bandType?: string
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        fixedBand?: string
        floorBand?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuFilterType?: string
        skuList?: Array<number>
        startIndex?: number
        upperBand?: number
        };
}

/**
 * 分页查询【跟价池】
 */
export function getApiPricingFollowPoolExport(param: IGetApiPricingFollowPoolExportParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingFollowPoolIsAutoPubParam {
    body?: {
        poolIsAutoPubUpdateDTO?: PoolIsAutoPubUpdateDTO
        };
}

/**
 * 批量更新是否自动发布价格
 */
export function postApiPricingFollowPoolIsAutoPub(param: IPostApiPricingFollowPoolIsAutoPubParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/isAutoPub', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingFollowPoolRemoveParam {
    body?: {
        skuIds?: number
        };
}

/**
 * 批量从跟价池移除sku
 */
export function postApiPricingFollowPoolRemove(param: IPostApiPricingFollowPoolRemoveParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/remove', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingManualAdjustPriceParam {
    body?: {
        manualAdjustPriceAddDTO?: ManualAdjustPriceAddDTO
        };
}

/**
 * 调价
 */
export function postApiPricingManualAdjustPrice(param: IPostApiPricingManualAdjustPriceParam) {

                const [ url, option ] = interceptRequest('/api/pricing/manualAdjustPrice', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingManualPublishPricePubParam {
    body?: {
        prIds?: number[]
        };
}

/**
 * 批量发布商品价格
 */
export function postApiPricingManualPublishPricePub(param: IPostApiPricingManualPublishPricePubParam) {

                const [ url, option ] = interceptRequest('/api/pricing/manualPublishPrice/pub', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOListPubPriceErrorVO>(interceptResponse)
              
}

interface IPostApiPricingManualPublishPriceRejectParam {
    body?: {
        prIds?: number[]
        };
}

/**
 * 批量拒绝商品价格
 */
export function postApiPricingManualPublishPriceReject(param: IPostApiPricingManualPublishPriceRejectParam) {

                const [ url, option ] = interceptRequest('/api/pricing/manualPublishPrice/reject', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingOpponentParam {
    query?: {
        cidList?: Array<number>
        level?: number
        };
}

/**
 * 通过分类获取友商信息
 */
export function getApiPricingOpponent(param: IGetApiPricingOpponentParam) {

                const [ url, option ] = interceptRequest('/api/pricing/opponent', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListOpponentVO>(interceptResponse)
              
}

interface IDeleteApiPricingPromotionParam {
    body?: {
        promoIds?: number[]
        };
}

/**
 * 删除指定促销
 */
export function deleteApiPricingPromotion(param: IDeleteApiPricingPromotionParam) {

                const [ url, option ] = interceptRequest('/api/pricing/promotion', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingPromotionSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 获取sku的促销信息
 */
export function getApiPricingPromotionSkuId(param: IGetApiPricingPromotionSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/promotion/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromotionListVO>(interceptResponse)
              
}

interface IGetApiPricingUserInputDataParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        startIndex?: number
        };
}

/**
 * 分页查询【用户录入数据】
 */
export function getApiPricingUserInputData(param: IGetApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOUserInputDataListVO>(interceptResponse)
              
}

interface IPostApiPricingUserInputDataParam {
    body?: {
        userInputDataAddUpdateDTO?: UserInputDataAddUpdateDTO
        };
}

/**
 * 新增、修改【用户录入数据】
 */
export function postApiPricingUserInputData(param: IPostApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IDeleteApiPricingUserInputDataParam {
    body?: {
        id?: number
        };
}

/**
 * 批量删除【用户录入数据】
 */
export function deleteApiPricingUserInputData(param: IDeleteApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOint>(interceptResponse)
              
}

interface IGetApiPricingUserInputDataExportParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        startIndex?: number
        };
}

/**
 * 分页查询【用户录入数据】
 */
export function getApiPricingUserInputDataExport(param: IGetApiPricingUserInputDataExportParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiPricingUserInputDataUploadParam {
    formData: {
        file: File
        };
}

/**
 * 导入【用户录入数据】
 */
export function postApiPricingUserInputDataUpload(param: IPostApiPricingUserInputDataUploadParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/upload', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiPricingUserInputDataIdParam {
    path?: {
        id?: number
        };
}

/**
 * 查看【用户录入数据】详情
 */
export function getApiPricingUserInputDataId(param: IGetApiPricingUserInputDataIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/:id', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOUserInputDataEditVO>(interceptResponse)
              
}
"
`;

exports[`generatePaths projectB paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { ReplyVOListOpponentVO, ReplyVOPageVOCisSkuListVO, ReplyVOListPriceHistoryVO, CisMatchInfoDTO, ReplyVOVoid, SkuMatchDTO, ReplyVOListOpponentSkuListVO, CisSkuDTO, ReplyVOConfigVO, ReplyVOCisSkuShowVO } from \\"./definitions\\";

interface IGetApiCompetitionOpponentParam {
    query?: {
        skuId?: number
        };
}

/**
 * 查询【友商】
 */
export function getApiCompetitionOpponent(param: IGetApiCompetitionOpponentParam) {

                const [ url, option ] = interceptRequest('/api/competition/opponent', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListOpponentVO>(interceptResponse)
              
}

interface IGetApiCompetitionSkuParam {
    query?: {
        blackListStatus?: boolean
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: Array<string>
        deptLevel?: number
        endIndex?: number
        gmvBand?: Array<string>
        matchStatus?: boolean
        monitorStatus?: boolean
        orderBy?: string
        orderType?: string
        pageNo?: number
        pageSize?: number
        priceTag?: number
        priceType?: number
        pvBand?: Array<string>
        salerErp?: string
        salerErps?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        skuIds?: Array<number>
        skuName?: string
        startIndex?: number
        };
}

/**
 * 分页查询【比价sku】
 */
export function getApiCompetitionSku(param: IGetApiCompetitionSkuParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOCisSkuListVO>(interceptResponse)
              
}

interface IGetApiCompetitionSkuHistorySkuIdParam {
    query?: {
        priceType?: number
        };
    path?: {
        skuId?: number
        };
}

/**
 * 查看【价格历史】详情
 */
export function getApiCompetitionSkuHistorySkuId(param: IGetApiCompetitionSkuHistorySkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/history/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceHistoryVO>(interceptResponse)
              
}

interface IPostApiCompetitionSkuMatchParam {
    body: {
        cisMatchInfoDTO: CisMatchInfoDTO
        };
}

/**
 * 新增【比价匹配商品】
 */
export function postApiCompetitionSkuMatch(param: IPostApiCompetitionSkuMatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IDeleteApiCompetitionSkuMatchParam {
    body: {
        skuMatchDTO: SkuMatchDTO
        };
}

/**
 * 批量删除【比价匹配商品】
 */
export function deleteApiCompetitionSkuMatch(param: IDeleteApiCompetitionSkuMatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IPostApiCompetitionSkuMatchBatchParam {
    formData: {
        file: File
        };
}

/**
 * 批量新增【比价匹配商品】
 */
export function postApiCompetitionSkuMatchBatch(param: IPostApiCompetitionSkuMatchBatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match/batch', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IGetApiCompetitionSkuMatchSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 查询【友商sku】
 */
export function getApiCompetitionSkuMatchSkuId(param: IGetApiCompetitionSkuMatchSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListOpponentSkuListVO>(interceptResponse)
              
}

interface IGetApiCompetitionSkuMonitorParam {
    query?: {
        blackListStatus?: boolean
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: Array<string>
        deptLevel?: number
        endIndex?: number
        gmvBand?: Array<string>
        matchStatus?: boolean
        monitorStatus?: boolean
        orderBy?: string
        orderType?: string
        pageNo?: number
        pageSize?: number
        priceTag?: number
        priceType?: number
        pvBand?: Array<string>
        salerErp?: string
        salerErps?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        skuIds?: Array<number>
        skuName?: string
        startIndex?: number
        };
}

/**
 * 分页查询【比价重点关注商品】
 */
export function getApiCompetitionSkuMonitor(param: IGetApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOCisSkuListVO>(interceptResponse)
              
}

interface IPostApiCompetitionSkuMonitorParam {
    body: {
        cisSkuQO: CisSkuDTO
        };
}

/**
 * 批量新增【比价重点关注商品】
 */
export function postApiCompetitionSkuMonitor(param: IPostApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IDeleteApiCompetitionSkuMonitorParam {
    body: {
        cisSkuQO: CisSkuDTO
        };
}

/**
 * 批量删除【比价重点关注商品】
 */
export function deleteApiCompetitionSkuMonitor(param: IDeleteApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

/**
 * 查询监控提示【比价重点关注商品】
 */
export function getApiCompetitionSkuMonitorGetConfig() {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor/getConfig')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOConfigVO>(interceptResponse)
              
}

interface IGetApiCompetitionSkuSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 查看【比价sku】详情
 */
export function getApiCompetitionSkuSkuId(param: IGetApiCompetitionSkuSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOCisSkuShowVO>(interceptResponse)
              
}
"
`;

exports[`generatePaths projectC paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { ReplyVOint, ReplyVOVoid, ReplyVOChartResultVOPriceCompeteChartListVO, ReplyVOPriceCompeteSumVO, ReplyVOListPriceEcAnalysisBrandVO, ReplyVOListPriceEcAnalysisCatVO, ReplyVOListPriceEcAnalysisDeptVO, ReplyVOPriceEcAnalysisHomeIndexVO, ReplyVOListPriceEcAnalysisSalerVO, ReplyVOPriceEcAnalysisTopVO, ReplyVOChartResultVOPriceHonestChartListVO, ReplyVOListPriceHonestSkuListVO, ReplyVOPriceHonestSumVO, ReplyVOChartResultVOPriceWaveChartListVO, ReplyVOListPriceWaveSkuListVO, ReplyVOPriceWaveSumVO, ReplyVOPromoAnalysisSumVO, ReplyVOPromoAnalysisChartVO, ReplyVOSetPromoDeptTreeVO, ReplyVOPromoAnalysisHomeIndexVO, ReplyVOPromoAnalysisPromoResultVO, ReplyVOPageVOPromoAnalysisPromoSkuVO, ReplyVOPromoAnalysisSkuResultVO, ReplyVOReportTaskShowVO, ReportTaskDeleteQO, ReplyVO, ReplyVOPageVOReportTaskInstanceVO, ReplyVOPageVOReportTaskListVO, ReportRetryQO, ReportTaskAddDTO, ReportTaskUpdateDTO, ReplyVOPageVOSkuBlacklistListVO, SkuBlacklistAddDTO, SkuBlacklistDeleteQO, ReplyVOListTopBrandListVO, TopBrandAddDTO, TopBrandDeleteQO, ReplyVOMarkdownPriceCalcVO, ReplyVOMarkdownSaleSimulateVO, ReplyVOMarkdownTrendSimulateVO, ReplyVOSimulateSkuVO, ReplyVOListSkuHistoryDTO, ReplyVOPageVOSimulateSkuVO, ReplyVOListSaleSimulateTableVO, ReplyVOSaleSimulateVO, PromoRoQO, PromoOverlayRiskDTO, ReplyVOListPromoResponse, ReplyVOMaplongboolean, ReplyVOPromoRoVO, ReplyVOListSelectOptionVOint, ReplyVOPageVOPromoSimulateDetailVO, ReplyVOPromoSimulateTotalVO } from \\"./definitions\\";

type EsIndexAddDTO = any;
type ListBrandVO = any;

interface IPostApiDataboardBoardEsCreateIndexParam {
    body?: {
        esIndexAddDTO?: EsIndexAddDTO
        };
    formData: {
        file: File
        };
    query: {
        indexAlias: string
        indexNames: Array<string>
        };
}

/**
 * 创建索引
 */
export function postApiDataboardBoardEsCreateIndex(param: IPostApiDataboardBoardEsCreateIndexParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/es/createIndex', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOint>(interceptResponse)
              
}

interface IDeleteApiDataboardBoardEsDelIndexParam {
    body?: {
        indexNames?: Array<string>
        };
}

/**
 * 删除索引
 */
export function deleteApiDataboardBoardEsDelIndex(param: IDeleteApiDataboardBoardEsDelIndexParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/es/delIndex', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOint>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceCompeteExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        opponentCode?: string
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: {
        exportEmail: string
        };
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceCompeteExportChart(param: IGetApiDataboardBoardPriceCompeteExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/exportChart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceCompeteListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        opponentCode?: string
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格竞争力-图表、列表】
 */
export function getApiDataboardBoardPriceCompeteList(param: IGetApiDataboardBoardPriceCompeteListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOChartResultVOPriceCompeteChartListVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceCompeteShowSummaryParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询实时汇总数据【价格竞争力-实时数据(汇总部分)】
 */
export function getApiDataboardBoardPriceCompeteShowSummary(param: IGetApiDataboardBoardPriceCompeteShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/showSummary', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceCompeteSumVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceEcAnalysisBrandListParam {
    query?: {
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 品牌下钻
 */
export function getApiDataboardBoardPriceEcAnalysisBrandList(param: IGetApiDataboardBoardPriceEcAnalysisBrandListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/brandList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisBrandVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceEcAnalysisCatListParam {
    query?: {
        catLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 品类下钻
 */
export function getApiDataboardBoardPriceEcAnalysisCatList(param: IGetApiDataboardBoardPriceEcAnalysisCatListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/catList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisCatVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceEcAnalysisDeptListParam {
    query?: {
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 部门下钻
 */
export function getApiDataboardBoardPriceEcAnalysisDeptList(param: IGetApiDataboardBoardPriceEcAnalysisDeptListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/deptList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisDeptVO>(interceptResponse)
              
}

/**
 * 首页指标
 */
export function getApiDataboardBoardPriceEcAnalysisHomeIndex() {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/homeIndex')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceEcAnalysisHomeIndexVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceEcAnalysisSalerListParam {
    query?: {
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 采销下钻
 */
export function getApiDataboardBoardPriceEcAnalysisSalerList(param: IGetApiDataboardBoardPriceEcAnalysisSalerListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/salerList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisSalerVO>(interceptResponse)
              
}

/**
 * 3个top1
 */
export function getApiDataboardBoardPriceEcAnalysisTop() {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/top')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceEcAnalysisTopVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceHonestExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: {
        exportEmail: string
        };
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceHonestExportChart(param: IGetApiDataboardBoardPriceHonestExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/exportChart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceHonestExportListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
    body: {
        exportEmail: string
        };
}

/**
 * 查看更多（导出）
 */
export function getApiDataboardBoardPriceHonestExportListSku(param: IGetApiDataboardBoardPriceHonestExportListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/exportListSku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceHonestListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格诚信度-图表、列表】
 */
export function getApiDataboardBoardPriceHonestList(param: IGetApiDataboardBoardPriceHonestListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOChartResultVOPriceHonestChartListVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceHonestListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询T+1sku数据【价格竞争力T+1数据(sku部分)】
 */
export function getApiDataboardBoardPriceHonestListSku(param: IGetApiDataboardBoardPriceHonestListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/listSku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceHonestSkuListVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceHonestShowSummaryParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询T+1汇总数据【价格竞争力T+1数据(汇总部分)】
 */
export function getApiDataboardBoardPriceHonestShowSummary(param: IGetApiDataboardBoardPriceHonestShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/showSummary', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceHonestSumVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceWaveExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: {
        exportEmail: string
        };
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceWaveExportChart(param: IGetApiDataboardBoardPriceWaveExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/exportChart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceWaveListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格波动性-图表、列表】
 */
export function getApiDataboardBoardPriceWaveList(param: IGetApiDataboardBoardPriceWaveListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOChartResultVOPriceWaveChartListVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceWaveListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询时间段内sku数据【价格波动性-时间段内数据(sku部分)】
 */
export function getApiDataboardBoardPriceWaveListSku(param: IGetApiDataboardBoardPriceWaveListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/listSku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceWaveSkuListVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPriceWaveShowSummaryParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询时间段内汇总数据【价格波动性-时间段内数据(汇总部分)】
 */
export function getApiDataboardBoardPriceWaveShowSummary(param: IGetApiDataboardBoardPriceWaveShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/showSummary', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceWaveSumVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPromoAnalysisBenchmarkingParam {
    query?: {
        cid?: number
        deptId?: string
        monthRange?: Array<string>
        };
}

/**
 * 对标均值
 */
export function getApiDataboardBoardPromoAnalysisBenchmarking(param: IGetApiDataboardBoardPromoAnalysisBenchmarkingParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/benchmarking', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisSumVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPromoAnalysisChartParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 明细分析(3张图表)
 */
export function getApiDataboardBoardPromoAnalysisChart(param: IGetApiDataboardBoardPromoAnalysisChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/chart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisChartVO>(interceptResponse)
              
}

/**
 * 获取所有部门
 */
export function getApiDataboardBoardPromoAnalysisDept() {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/dept')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSetPromoDeptTreeVO>(interceptResponse)
              
}

/**
 * 首页指标
 */
export function getApiDataboardBoardPromoAnalysisHomeIndex() {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/homeIndex')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisHomeIndexVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPromoAnalysisPromoListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        promoDeptName?: string
        promoId?: number
        promoStatus?: number
        promoSubType?: number
        promoType?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 促销下钻
 */
export function getApiDataboardBoardPromoAnalysisPromoList(param: IGetApiDataboardBoardPromoAnalysisPromoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/promoList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisPromoResultVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPromoAnalysisPromoSkuListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        promoId?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 促销商品列表
 */
export function getApiDataboardBoardPromoAnalysisPromoSkuList(param: IGetApiDataboardBoardPromoAnalysisPromoSkuListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/promoSkuList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOPromoAnalysisPromoSkuVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardPromoAnalysisSkuListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: number
        };
}

/**
 * 商品下钻
 */
export function getApiDataboardBoardPromoAnalysisSkuList(param: IGetApiDataboardBoardPromoAnalysisSkuListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/skuList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisSkuResultVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardReportTaskConfigIdParam {
    path?: {
        id?: number
        };
}

/**
 * 查看【报表任务】详情
 */
export function getApiDataboardBoardReportTaskConfigId(param: IGetApiDataboardBoardReportTaskConfigIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/config/:id', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOReportTaskShowVO>(interceptResponse)
              
}

interface IDeleteApiDataboardBoardReportTaskDeleteBatchParam {
    body?: {
        reportTaskDeleteQO?: ReportTaskDeleteQO
        };
}

/**
 * 批量删除【报表任务】
 */
export function deleteApiDataboardBoardReportTaskDeleteBatch(param: IDeleteApiDataboardBoardReportTaskDeleteBatchParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/deleteBatch', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardReportTaskInstanceListParam {
    query?: {
        pageNo?: number
        pageSize?: number
        taskId?: number
        };
}

/**
 * 查看【报表任务】执行详情
 */
export function getApiDataboardBoardReportTaskInstanceList(param: IGetApiDataboardBoardReportTaskInstanceListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/instance/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOReportTaskInstanceVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardReportTaskListParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 分页查询【报表任务】
 */
export function getApiDataboardBoardReportTaskList(param: IGetApiDataboardBoardReportTaskListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOReportTaskListVO>(interceptResponse)
              
}

interface IPostApiDataboardBoardReportTaskRetryParam {
    body?: {
        reportRetryQO?: ReportRetryQO
        };
}

/**
 * 手动触发【报表任务】
 */
export function postApiDataboardBoardReportTaskRetry(param: IPostApiDataboardBoardReportTaskRetryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/retry', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPostApiDataboardBoardReportTaskSaveParam {
    body?: {
        reportTaskAddDTO?: ReportTaskAddDTO
        };
}

/**
 * 新增【报表任务】
 */
export function postApiDataboardBoardReportTaskSave(param: IPostApiDataboardBoardReportTaskSaveParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/save', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IPutApiDataboardBoardReportTaskUpdateParam {
    body?: {
        reportTaskUpdateDTO?: ReportTaskUpdateDTO
        };
}

/**
 * 修改【报表任务】
 */
export function putApiDataboardBoardReportTaskUpdate(param: IPutApiDataboardBoardReportTaskUpdateParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/update', param)
                option.method = 'put'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardSkuBlacklistParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 分页查询【sku黑名单设置】
 */
export function getApiDataboardBoardSkuBlacklist(param: IGetApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOSkuBlacklistListVO>(interceptResponse)
              
}

interface IPostApiDataboardBoardSkuBlacklistParam {
    body?: {
        skuBlacklistAddDTO?: SkuBlacklistAddDTO
        };
}

/**
 * 新增【sku黑名单设置】
 */
export function postApiDataboardBoardSkuBlacklist(param: IPostApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IDeleteApiDataboardBoardSkuBlacklistParam {
    body?: {
        skuBlacklistDeleteQO?: SkuBlacklistDeleteQO
        };
}

/**
 * 批量删除【sku黑名单设置】
 */
export function deleteApiDataboardBoardSkuBlacklist(param: IDeleteApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiDataboardBoardSkuBlacklistExportParam {
    query?: {
        exportEmail?: string
        };
}

/**
 * 导出【sku黑名单设置】
 */
export function getApiDataboardBoardSkuBlacklistExport(param: IGetApiDataboardBoardSkuBlacklistExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

/**
 * 分页查询【重点品牌监控设置】
 */
export function getApiDataboardBoardTopBrand() {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListTopBrandListVO>(interceptResponse)
              
}

interface IPostApiDataboardBoardTopBrandParam {
    body: {
        brands?: ListBrandVO
        topBrandAddDTO: TopBrandAddDTO
        };
}

/**
 * 新增【重点品牌监控设置】
 */
export function postApiDataboardBoardTopBrand(param: IPostApiDataboardBoardTopBrandParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IDeleteApiDataboardBoardTopBrandParam {
    path?: {
        id?: number
        };
    body: {
        topBrandDeleteQO: TopBrandDeleteQO
        };
}

/**
 * 按id查询【重点品牌监控设置】
 */
export function deleteApiDataboardBoardTopBrand(param: IDeleteApiDataboardBoardTopBrandParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceMarkdownSimulateCalcParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 建议价格计算接口
 */
export function getApiDataboardPriceMarkdownSimulateCalc(param: IGetApiDataboardPriceMarkdownSimulateCalcParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/calc', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOMarkdownPriceCalcVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceMarkdownSimulateExportParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
    body: {
        exportEmail: string
        };
}

/**
 * 历史量价明细导出
 */
export function getApiDataboardPriceMarkdownSimulateExport(param: IGetApiDataboardPriceMarkdownSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceMarkdownSimulateSaleParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 量价关系模拟接口
 */
export function getApiDataboardPriceMarkdownSimulateSale(param: IGetApiDataboardPriceMarkdownSimulateSaleParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/sale', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOMarkdownSaleSimulateVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceMarkdownSimulateTrendParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 清理量趋势预测接口
 */
export function getApiDataboardPriceMarkdownSimulateTrend(param: IGetApiDataboardPriceMarkdownSimulateTrendParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/trend', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOMarkdownTrendSimulateVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceMarkdownSimulateSkuIdParam {
    path: {
        skuId: number
        };
}

/**
 * 查询sku详情
 */
export function getApiDataboardPriceMarkdownSimulateSkuId(param: IGetApiDataboardPriceMarkdownSimulateSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSimulateSkuVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceSaleSimulateExportParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
    body: {
        exportEmail: string
        };
}

/**
 * 历史量价明细导出
 */
export function getApiDataboardPriceSaleSimulateExport(param: IGetApiDataboardPriceSaleSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceSaleSimulateHistoryParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
}

/**
 * 历史数据明细
 */
export function getApiDataboardPriceSaleSimulateHistory(param: IGetApiDataboardPriceSaleSimulateHistoryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/history', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSkuHistoryDTO>(interceptResponse)
              
}

interface IGetApiDataboardPriceSaleSimulateListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthPriceChange?: number
        pageNo?: number
        pageSize?: number
        potentialType?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuIds?: string
        sortType?: string
        };
}

/**
 * 分页查询【销售优化模拟商品列表】
 */
export function getApiDataboardPriceSaleSimulateList(param: IGetApiDataboardPriceSaleSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOSimulateSkuVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceSaleSimulateShowTableParam {
    query?: {
        endDate?: string
        maxPrice?: number
        maxPv?: number
        minPrice?: number
        minPv?: number
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDate?: string
        };
}

/**
 * 按pv分段展示表格
 */
export function getApiDataboardPriceSaleSimulateShowTable(param: IGetApiDataboardPriceSaleSimulateShowTableParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/showTable', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSaleSimulateTableVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceSaleSimulateSimulateParam {
    query?: {
        endDate?: string
        maxPrice?: number
        maxPv?: number
        minPrice?: number
        minPv?: number
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDate?: string
        };
}

/**
 * 销售优化模拟
 */
export function getApiDataboardPriceSaleSimulateSimulate(param: IGetApiDataboardPriceSaleSimulateSimulateParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/simulate', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSaleSimulateVO>(interceptResponse)
              
}

interface IGetApiDataboardPriceSaleSimulateSkuIdParam {
    path: {
        skuId: number
        };
}

/**
 * 查询sku详情
 */
export function getApiDataboardPriceSaleSimulateSkuId(param: IGetApiDataboardPriceSaleSimulateSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSimulateSkuVO>(interceptResponse)
              
}

interface IGetApiDataboardPromoRoExportParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 选品导出【Get方法】
 */
export function getApiDataboardPromoRoExport(param: IGetApiDataboardPromoRoExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IPostApiDataboardPromoRoExportParam {
    body: {
        qo: PromoRoQO
        };
}

/**
 * 选品导出【Post方法】
 */
export function postApiDataboardPromoRoExport(param: IPostApiDataboardPromoRoExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/export', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IPostApiDataboardPromoRoFindOverlayPromoParam {
    body: {
        dto: PromoOverlayRiskDTO
        };
}

/**
 * 查询sku有叠加风险的其他促销
 */
export function postApiDataboardPromoRoFindOverlayPromo(param: IPostApiDataboardPromoRoFindOverlayPromoParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/findOverlayPromo', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOListPromoResponse>(interceptResponse)
              
}

interface IPostApiDataboardPromoRoFindOverlayRiskParam {
    body: {
        dto: PromoOverlayRiskDTO
        };
}

/**
 * 查询sku是否有叠加其他促销风险
 */
export function postApiDataboardPromoRoFindOverlayRisk(param: IPostApiDataboardPromoRoFindOverlayRiskParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/findOverlayRisk', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOMaplongboolean>(interceptResponse)
              
}

interface IGetApiDataboardPromoRoListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 查询选品【Get方法】
 */
export function getApiDataboardPromoRoList(param: IGetApiDataboardPromoRoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoRoVO>(interceptResponse)
              
}

interface IPostApiDataboardPromoRoListParam {
    body: {
        qo: PromoRoQO
        };
}

/**
 * 查询选品【Post方法】
 */
export function postApiDataboardPromoRoList(param: IPostApiDataboardPromoRoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/list', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOPromoRoVO>(interceptResponse)
              
}

interface IGetApiDataboardPromoRoSubTypesParam {
    query: {
        promoType: number
        };
}

/**
 * 根据促销类型查询促销子类型列表
 */
export function getApiDataboardPromoRoSubTypes(param: IGetApiDataboardPromoRoSubTypesParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/subTypes', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSelectOptionVOint>(interceptResponse)
              
}

interface IGetApiDataboardPromoSimulateExportParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 模拟导出【Get方法】
 */
export function getApiDataboardPromoSimulateExport(param: IGetApiDataboardPromoSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IPostApiDataboardPromoSimulateExportParam {
    body: {
        qo: PromoRoQO
        };
}

/**
 * 模拟导出【Post方法】
 */
export function postApiDataboardPromoSimulateExport(param: IPostApiDataboardPromoSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/export', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

interface IGetApiDataboardPromoSimulateListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 效果模拟【Get方法】
 */
export function getApiDataboardPromoSimulateList(param: IGetApiDataboardPromoSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOPromoSimulateDetailVO>(interceptResponse)
              
}

interface IPostApiDataboardPromoSimulateListParam {
    body: {
        qo: PromoRoQO
        };
}

/**
 * 效果模拟【Post方法】
 */
export function postApiDataboardPromoSimulateList(param: IPostApiDataboardPromoSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/list', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOPageVOPromoSimulateDetailVO>(interceptResponse)
              
}

interface IGetApiDataboardPromoSimulateSubTypesParam {
    query: {
        promoType: number
        };
}

/**
 * 根据促销类型查询促销子类型列表
 */
export function getApiDataboardPromoSimulateSubTypes(param: IGetApiDataboardPromoSimulateSubTypesParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/subTypes', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSelectOptionVOint>(interceptResponse)
              
}

interface IGetApiDataboardPromoSimulateTotalParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 效果模拟汇总【Get方法】
 */
export function getApiDataboardPromoSimulateTotal(param: IGetApiDataboardPromoSimulateTotalParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/total', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoSimulateTotalVO>(interceptResponse)
              
}

interface IPostApiDataboardPromoSimulateTotalParam {
    body: {
        qo: PromoRoQO
        };
}

/**
 * 效果模拟汇总【Post方法】
 */
export function postApiDataboardPromoSimulateTotal(param: IPostApiDataboardPromoSimulateTotalParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/total', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOPromoSimulateTotalVO>(interceptResponse)
              
}
"
`;
