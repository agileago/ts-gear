// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateRequests pet paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { Pet, ApiResponse, Order, User } from \\"./definitions\\";

export interface IPostPetParam {
    body: Pet;
}

/**
 * Add a new pet to the store
 */
export function postPet(param: IPostPetParam) {

                const [ url, option ] = interceptRequest('/v2/pet', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IPutPetParam {
    body: Pet;
}

/**
 * Update an existing pet
 */
export function putPet(param: IPutPetParam) {

                const [ url, option ] = interceptRequest('/v2/pet', param)
                option.method = 'put'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IGetPetFindByStatusParam {
    query: {
        status: Array<'available' | 'pending' | 'sold'>
        };
}

type GetPetFindByStatusResponse = Array<Pet>
/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export function getPetFindByStatus(param: IGetPetFindByStatusParam) {

                const [ url, option ] = interceptRequest('/v2/pet/findByStatus', param)
                option.method = 'get'
                return fetch(url, option).then<GetPetFindByStatusResponse>(interceptResponse)
              
}

export interface IGetPetPetIdParam {
    path: {
        petId: number
        };
}

/**
 * Find pet by ID
 * Returns a single pet
 */
export function getPetPetId(param: IGetPetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                option.method = 'get'
                return fetch(url, option).then<Pet>(interceptResponse)
              
}

export interface IPostPetPetIdParam {
    path: {
        petId: number
        };
    formData?: {
        name?: string
        status?: string
        };
}

/**
 * Updates a pet in the store with form data
 */
export function postPetPetId(param: IPostPetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IDeletePetPetIdParam {
    header?: {
        api_key?: string
        };
    path: {
        petId: number
        };
}

/**
 * Deletes a pet
 */
export function deletePetPetId(param: IDeletePetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                option.method = 'delete'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IPostPetPetIdUploadImageParam {
    path: {
        petId: number
        };
    formData?: {
        additionalMetadata?: string
        file?: File
        };
}

/**
 * uploads an image
 */
export function postPetPetIdUploadImage(param: IPostPetPetIdUploadImageParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId/uploadImage', param)
                option.method = 'post'
                return fetch(url, option).then<ApiResponse>(interceptResponse)
              
}

type GetStoreInventoryResponse = any
/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export function getStoreInventory() {

                const [ url, option ] = interceptRequest('/v2/store/inventory')
                option.method = 'get'
                return fetch(url, option).then<GetStoreInventoryResponse>(interceptResponse)
              
}

export interface IPostStoreOrderParam {
    body: Order;
}

/**
 * Place an order for a pet
 */
export function postStoreOrder(param: IPostStoreOrderParam) {

                const [ url, option ] = interceptRequest('/v2/store/order', param)
                option.method = 'post'
                return fetch(url, option).then<Order>(interceptResponse)
              
}

export interface IGetStoreOrderOrderIdParam {
    path: {
        orderId: number
        };
}

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export function getStoreOrderOrderId(param: IGetStoreOrderOrderIdParam) {

                const [ url, option ] = interceptRequest('/v2/store/order/:orderId', param)
                option.method = 'get'
                return fetch(url, option).then<Order>(interceptResponse)
              
}

export interface IDeleteStoreOrderOrderIdParam {
    path: {
        orderId: number
        };
}

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export function deleteStoreOrderOrderId(param: IDeleteStoreOrderOrderIdParam) {

                const [ url, option ] = interceptRequest('/v2/store/order/:orderId', param)
                option.method = 'delete'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IPostUserParam {
    body: User;
}

/**
 * Create user
 * This can only be done by the logged in user.
 */
export function postUser(param: IPostUserParam) {

                const [ url, option ] = interceptRequest('/v2/user', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IPostUserCreateWithArrayParam {
    body: Array<User>;
}

/**
 * Creates list of users with given input array
 */
export function postUserCreateWithArray(param: IPostUserCreateWithArrayParam) {

                const [ url, option ] = interceptRequest('/v2/user/createWithArray', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IPostUserCreateWithListParam {
    body: Array<User>;
}

/**
 * Creates list of users with given input array
 */
export function postUserCreateWithList(param: IPostUserCreateWithListParam) {

                const [ url, option ] = interceptRequest('/v2/user/createWithList', param)
                option.method = 'post'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IGetUserLoginParam {
    query: {
        username: string
        password: string
        };
}

type GetUserLoginResponse = string
/**
 * Logs user into the system
 */
export function getUserLogin(param: IGetUserLoginParam) {

                const [ url, option ] = interceptRequest('/v2/user/login', param)
                option.method = 'get'
                return fetch(url, option).then<GetUserLoginResponse>(interceptResponse)
              
}

/**
 * Logs out current logged in user session
 */
export function getUserLogout() {

                const [ url, option ] = interceptRequest('/v2/user/logout')
                option.method = 'get'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IGetUserUsernameParam {
    path: {
        username: string
        };
}

/**
 * Get user by user name
 */
export function getUserUsername(param: IGetUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                option.method = 'get'
                return fetch(url, option).then<User>(interceptResponse)
              
}

export interface IPutUserUsernameParam {
    path: {
        username: string
        };
    body: User;
}

/**
 * Updated user
 * This can only be done by the logged in user.
 */
export function putUserUsername(param: IPutUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                option.method = 'put'
                return fetch(url, option).then(interceptResponse)
              
}

export interface IDeleteUserUsernameParam {
    path: {
        username: string
        };
}

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export function deleteUserUsername(param: IDeleteUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                option.method = 'delete'
                return fetch(url, option).then(interceptResponse)
              
}
"
`;

exports[`generateRequests pet paths 2`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { Pet, ApiResponse, Order, User } from \\"./definitions\\";

const { info } = console

export interface IPostPetParam {
    body: Pet;
}

/**
 * Add a new pet to the store
 */
export function postPet(param: IPostPetParam) {

                const [ url, option ] = interceptRequest('/v2/pet', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPutPetParam {
    body: Pet;
}

/**
 * Update an existing pet
 */
export function putPet(param: IPutPetParam) {

                const [ url, option ] = interceptRequest('/v2/pet', param)
                info('mock fetch: ', url)
                option.method = 'put'
                Promise.resolve(new Response())
              
}

export interface IGetPetFindByStatusParam {
    query: {
        status: Array<'available' | 'pending' | 'sold'>
        };
}

type GetPetFindByStatusResponse = Array<Pet>
/**
 * Finds Pets by status
 * Multiple status values can be provided with comma separated strings
 */
export function getPetFindByStatus(param: IGetPetFindByStatusParam) {

                const [ url, option ] = interceptRequest('/v2/pet/findByStatus', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve([{\\"id\\":0,\\"category\\":{\\"id\\":0,\\"name\\":\\"string\\"},\\"name\\":\\"doggie\\",\\"photoUrls\\":[\\"string\\"],\\"tags\\":[{\\"id\\":0,\\"name\\":\\"string\\"}],\\"status\\":\\"available\\"}]) as Promise<GetPetFindByStatusResponse>
              
}

export interface IGetPetPetIdParam {
    path: {
        petId: number
        };
}

/**
 * Find pet by ID
 * Returns a single pet
 */
export function getPetPetId(param: IGetPetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IPostPetPetIdParam {
    path: {
        petId: number
        };
    formData?: {
        name?: string
        status?: string
        };
}

/**
 * Updates a pet in the store with form data
 */
export function postPetPetId(param: IPostPetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IDeletePetPetIdParam {
    header?: {
        api_key?: string
        };
    path: {
        petId: number
        };
}

/**
 * Deletes a pet
 */
export function deletePetPetId(param: IDeletePetPetIdParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IPostPetPetIdUploadImageParam {
    path: {
        petId: number
        };
    formData?: {
        additionalMetadata?: string
        file?: File
        };
}

/**
 * uploads an image
 */
export function postPetPetIdUploadImage(param: IPostPetPetIdUploadImageParam) {

                const [ url, option ] = interceptRequest('/v2/pet/:petId/uploadImage', param)
                info('mock fetch: ', url)
                option.method = 'post'
                return Promise.resolve({\\"code\\":0,\\"type\\":\\"string\\",\\"message\\":\\"string\\"}) as Promise<ApiResponse>
              
}

type GetStoreInventoryResponse = any
/**
 * Returns pet inventories by status
 * Returns a map of status codes to quantities
 */
export function getStoreInventory() {

                const [ url, option ] = interceptRequest('/v2/store/inventory')
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"additionalProp1\\":0,\\"additionalProp2\\":0,\\"additionalProp3\\":0}) as Promise<GetStoreInventoryResponse>
              
}

export interface IPostStoreOrderParam {
    body: Order;
}

/**
 * Place an order for a pet
 */
export function postStoreOrder(param: IPostStoreOrderParam) {

                const [ url, option ] = interceptRequest('/v2/store/order', param)
                info('mock fetch: ', url)
                option.method = 'post'
                return Promise.resolve({\\"id\\":0,\\"petId\\":0,\\"quantity\\":0,\\"shipDate\\":\\"2019-09-03T00:00:00.000Z\\",\\"status\\":\\"placed\\",\\"complete\\":false}) as Promise<Order>
              
}

export interface IGetStoreOrderOrderIdParam {
    path: {
        orderId: number
        };
}

/**
 * Find purchase order by ID
 * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export function getStoreOrderOrderId(param: IGetStoreOrderOrderIdParam) {

                const [ url, option ] = interceptRequest('/v2/store/order/:orderId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IDeleteStoreOrderOrderIdParam {
    path: {
        orderId: number
        };
}

/**
 * Delete purchase order by ID
 * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export function deleteStoreOrderOrderId(param: IDeleteStoreOrderOrderIdParam) {

                const [ url, option ] = interceptRequest('/v2/store/order/:orderId', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IPostUserParam {
    body: User;
}

/**
 * Create user
 * This can only be done by the logged in user.
 */
export function postUser(param: IPostUserParam) {

                const [ url, option ] = interceptRequest('/v2/user', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostUserCreateWithArrayParam {
    body: Array<User>;
}

/**
 * Creates list of users with given input array
 */
export function postUserCreateWithArray(param: IPostUserCreateWithArrayParam) {

                const [ url, option ] = interceptRequest('/v2/user/createWithArray', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostUserCreateWithListParam {
    body: Array<User>;
}

/**
 * Creates list of users with given input array
 */
export function postUserCreateWithList(param: IPostUserCreateWithListParam) {

                const [ url, option ] = interceptRequest('/v2/user/createWithList', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetUserLoginParam {
    query: {
        username: string
        password: string
        };
}

type GetUserLoginResponse = string
/**
 * Logs user into the system
 */
export function getUserLogin(param: IGetUserLoginParam) {

                const [ url, option ] = interceptRequest('/v2/user/login', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve(\\"string\\") as Promise<GetUserLoginResponse>
              
}

/**
 * Logs out current logged in user session
 */
export function getUserLogout() {

                const [ url, option ] = interceptRequest('/v2/user/logout')
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetUserUsernameParam {
    path: {
        username: string
        };
}

/**
 * Get user by user name
 */
export function getUserUsername(param: IGetUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"id\\":0,\\"username\\":\\"string\\",\\"firstName\\":\\"string\\",\\"lastName\\":\\"string\\",\\"email\\":\\"string\\",\\"password\\":\\"string\\",\\"phone\\":\\"string\\",\\"userStatus\\":0}) as Promise<User>
              
}

export interface IPutUserUsernameParam {
    path: {
        username: string
        };
    body: User;
}

/**
 * Updated user
 * This can only be done by the logged in user.
 */
export function putUserUsername(param: IPutUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                info('mock fetch: ', url)
                option.method = 'put'
                Promise.resolve(new Response())
              
}

export interface IDeleteUserUsernameParam {
    path: {
        username: string
        };
}

/**
 * Delete user
 * This can only be done by the logged in user.
 */
export function deleteUserUsername(param: IDeleteUserUsernameParam) {

                const [ url, option ] = interceptRequest('/v2/user/:username', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}
"
`;

exports[`generateRequests projectA paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { ReplyVOPageVOAuditFlowListVO, AuditFlowDTO, ReplyVO, ReplyVOAuditFlowDeptFollowRuleDetailVO, ReplyVOPageVOBlackListVO, BlackListAddDeleteDTO, ReplyVOPageVODeptFollowRuleListVO, DeptFollowRuleAddUpdateDTO, ReplyVODeptFollowRuleViewVO, ReplyVODeptFollowRuleEditVO, ReplyVOPageVOFollowPoolListVO, FollowPoolSkuAddDeleteDTO, PoolIsAutoPubUpdateDTO, ManualAdjustPriceAddDTO, ReplyVOListOpponentVO, PromotionDeleteDTO, ReplyVOPromotionListVO, PublishPricingDTO, ReplyVOPageVOUserInputDataListVO, UserInputDataAddUpdateDTO, UserInputDataDeleteDTO, ReplyVOInt, ReplyVOUserInputDataEditVO } from \\"./definitions\\";

export interface IGetApiPricingAuditFlowParam {
    query?: {
        auditStatusList?: Array<number>
        createrList?: Array<string>
        endIndex?: number
        pageNo?: number
        pageSize?: number
        ruleType?: number
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【规则审批流】
 */
export function getApiPricingAuditFlow(param: IGetApiPricingAuditFlowParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOAuditFlowListVO>(interceptResponse)
              
}

export interface IPostApiPricingAuditFlowApprovalParam {
    body: AuditFlowDTO;
}

/**
 * 批量审批通过
 */
export function postApiPricingAuditFlowApproval(param: IPostApiPricingAuditFlowApprovalParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/approval', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingAuditFlowRejectParam {
    body: AuditFlowDTO;
}

/**
 * 批量审批通过
 */
export function postApiPricingAuditFlowReject(param: IPostApiPricingAuditFlowRejectParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/reject', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingAuditFlowTakeBackParam {
    body: AuditFlowDTO;
}

/**
 * 批量取回
 */
export function postApiPricingAuditFlowTakeBack(param: IPostApiPricingAuditFlowTakeBackParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/takeBack', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingAuditFlowTypeTypeIdParam {
    path?: {
        id?: number
        type?: number
        };
}

/**
 * 查看审批流-部门跟价规则明细
 */
export function getApiPricingAuditFlowTypeTypeId(param: IGetApiPricingAuditFlowTypeTypeIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/type/:type/:id', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOAuditFlowDeptFollowRuleDetailVO>(interceptResponse)
              
}

export interface IGetApiPricingBlackListParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【黑名单】
 */
export function getApiPricingBlackList(param: IGetApiPricingBlackListParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOBlackListVO>(interceptResponse)
              
}

export interface IPostApiPricingBlackListAddParam {
    body: BlackListAddDeleteDTO;
}

/**
 * 批量添加sku到黑名单
 */
export function postApiPricingBlackListAdd(param: IPostApiPricingBlackListAddParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList/add', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingBlackListRemoveParam {
    body: BlackListAddDeleteDTO;
}

/**
 * 批量从黑名单移除sku
 */
export function postApiPricingBlackListRemove(param: IPostApiPricingBlackListRemoveParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList/remove', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingDeptFollowRuleParam {
    query: {
        auditStatus?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【部门跟价规则】
 */
export function getApiPricingDeptFollowRule(param: IGetApiPricingDeptFollowRuleParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVODeptFollowRuleListVO>(interceptResponse)
              
}

export interface IPostApiPricingDeptFollowRuleParam {
    body?: DeptFollowRuleAddUpdateDTO;
}

/**
 * 保存【部门跟价规则】
 */
export function postApiPricingDeptFollowRule(param: IPostApiPricingDeptFollowRuleParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingDeptFollowRuleSubmitParam {
    body?: DeptFollowRuleAddUpdateDTO;
}

/**
 * 提交审批【部门跟价规则】
 */
export function postApiPricingDeptFollowRuleSubmit(param: IPostApiPricingDeptFollowRuleSubmitParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/submit', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingDeptFollowRuleValidRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 查看生效的【部门跟价规则】详情
 */
export function getApiPricingDeptFollowRuleValidRuleHeaderId(param: IGetApiPricingDeptFollowRuleValidRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/validRule/:headerId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVODeptFollowRuleViewVO>(interceptResponse)
              
}

export interface IGetApiPricingDeptFollowRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 编辑【部门跟价规则】详情
 */
export function getApiPricingDeptFollowRuleHeaderId(param: IGetApiPricingDeptFollowRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/:headerId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVODeptFollowRuleEditVO>(interceptResponse)
              
}

export interface IDeleteApiPricingDeptFollowRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 删除【部门跟价规则】
 */
export function deleteApiPricingDeptFollowRuleHeaderId(param: IDeleteApiPricingDeptFollowRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/:headerId', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingFollowPoolParam {
    query: {
        bandMode?: number
        bandType?: string
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        fixedBand?: string
        floorBand?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuFilterType?: string
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        upperBand?: number
        };
}

/**
 * 分页查询【跟价池】
 */
export function getApiPricingFollowPool(param: IGetApiPricingFollowPoolParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOFollowPoolListVO>(interceptResponse)
              
}

export interface IPostApiPricingFollowPoolAddParam {
    body: FollowPoolSkuAddDeleteDTO;
}

/**
 * 批量添加sku到跟价池
 */
export function postApiPricingFollowPoolAdd(param: IPostApiPricingFollowPoolAddParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/add', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingFollowPoolExportParam {
    query: {
        bandMode?: number
        bandType?: string
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        fixedBand?: string
        floorBand?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuFilterType?: string
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        upperBand?: number
        };
}

/**
 * 分页查询【跟价池】
 */
export function getApiPricingFollowPoolExport(param: IGetApiPricingFollowPoolExportParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingFollowPoolIsAutoPubParam {
    body?: PoolIsAutoPubUpdateDTO;
}

/**
 * 批量更新是否自动发布价格
 */
export function postApiPricingFollowPoolIsAutoPub(param: IPostApiPricingFollowPoolIsAutoPubParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/isAutoPub', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingFollowPoolRemoveParam {
    body: FollowPoolSkuAddDeleteDTO;
}

/**
 * 批量从跟价池移除sku
 */
export function postApiPricingFollowPoolRemove(param: IPostApiPricingFollowPoolRemoveParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/remove', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingManualAdjustPriceParam {
    body?: ManualAdjustPriceAddDTO;
}

/**
 * 调价
 */
export function postApiPricingManualAdjustPrice(param: IPostApiPricingManualAdjustPriceParam) {

                const [ url, option ] = interceptRequest('/api/pricing/manualAdjustPrice', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingOpponentParam {
    query?: {
        cidList?: Array<number>
        level?: number
        sortSign?: string
        };
}

/**
 * 通过分类获取友商信息
 */
export function getApiPricingOpponent(param: IGetApiPricingOpponentParam) {

                const [ url, option ] = interceptRequest('/api/pricing/opponent', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListOpponentVO>(interceptResponse)
              
}

export interface IDeleteApiPricingPromotionParam {
    body: PromotionDeleteDTO;
}

/**
 * 删除指定促销
 */
export function deleteApiPricingPromotion(param: IDeleteApiPricingPromotionParam) {

                const [ url, option ] = interceptRequest('/api/pricing/promotion', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingPromotionSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 获取sku的促销信息
 */
export function getApiPricingPromotionSkuId(param: IGetApiPricingPromotionSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/promotion/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromotionListVO>(interceptResponse)
              
}

export interface IPostApiPricingPublishPricingPubPriceParam {
    body?: PublishPricingDTO;
}

/**
 * 批量发布商品价格
 */
export function postApiPricingPublishPricingPubPrice(param: IPostApiPricingPublishPricingPubPriceParam) {

                const [ url, option ] = interceptRequest('/api/pricing/publishPricing/pubPrice', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingPublishPricingRejectPriceParam {
    body?: PublishPricingDTO;
}

/**
 * 批量拒绝商品价格
 */
export function postApiPricingPublishPricingRejectPrice(param: IPostApiPricingPublishPricingRejectPriceParam) {

                const [ url, option ] = interceptRequest('/api/pricing/publishPricing/rejectPrice', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingUserInputDataParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【用户录入数据】
 */
export function getApiPricingUserInputData(param: IGetApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOUserInputDataListVO>(interceptResponse)
              
}

export interface IPostApiPricingUserInputDataParam {
    body?: UserInputDataAddUpdateDTO;
}

/**
 * 新增、修改【用户录入数据】
 */
export function postApiPricingUserInputData(param: IPostApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IDeleteApiPricingUserInputDataParam {
    body: UserInputDataDeleteDTO;
}

/**
 * 批量删除【用户录入数据】
 */
export function deleteApiPricingUserInputData(param: IDeleteApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOInt>(interceptResponse)
              
}

export interface IGetApiPricingUserInputDataExportParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【用户录入数据】
 */
export function getApiPricingUserInputDataExport(param: IGetApiPricingUserInputDataExportParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiPricingUserInputDataUploadParam {
    formData: {
        file: File
        };
}

/**
 * 导入【用户录入数据】
 */
export function postApiPricingUserInputDataUpload(param: IPostApiPricingUserInputDataUploadParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/upload', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiPricingUserInputDataIdParam {
    path?: {
        id?: number
        };
}

/**
 * 查看【用户录入数据】详情
 */
export function getApiPricingUserInputDataId(param: IGetApiPricingUserInputDataIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/:id', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOUserInputDataEditVO>(interceptResponse)
              
}
"
`;

exports[`generateRequests projectA paths 2`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { ReplyVOPageVOAuditFlowListVO, AuditFlowDTO, ReplyVO, ReplyVOAuditFlowDeptFollowRuleDetailVO, ReplyVOPageVOBlackListVO, BlackListAddDeleteDTO, ReplyVOPageVODeptFollowRuleListVO, DeptFollowRuleAddUpdateDTO, ReplyVODeptFollowRuleViewVO, ReplyVODeptFollowRuleEditVO, ReplyVOPageVOFollowPoolListVO, FollowPoolSkuAddDeleteDTO, PoolIsAutoPubUpdateDTO, ManualAdjustPriceAddDTO, ReplyVOListOpponentVO, PromotionDeleteDTO, ReplyVOPromotionListVO, PublishPricingDTO, ReplyVOPageVOUserInputDataListVO, UserInputDataAddUpdateDTO, UserInputDataDeleteDTO, ReplyVOInt, ReplyVOUserInputDataEditVO } from \\"./definitions\\";

const { info } = console

export interface IGetApiPricingAuditFlowParam {
    query?: {
        auditStatusList?: Array<number>
        createrList?: Array<string>
        endIndex?: number
        pageNo?: number
        pageSize?: number
        ruleType?: number
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【规则审批流】
 */
export function getApiPricingAuditFlow(param: IGetApiPricingAuditFlowParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"auditStatus\\":\\"待审批\\",\\"cid1Name\\":\\"办公用品\\",\\"cid2Name\\":\\"办公用品\\",\\"cid3Name\\":\\"笔类，本册，便签\\",\\"createdBy\\":\\"zhangsan\\",\\"createdTime\\":\\"2019-04-15 13:37:00\\",\\"deptName\\":\\"文仪业务一部\\",\\"id\\":1001,\\"operatedTime\\":\\"2019-04-15 13:37:00\\",\\"ruleName\\":\\"文仪业务一部+二级：办公文具\\",\\"type\\":1}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOAuditFlowListVO>
              
}

export interface IPostApiPricingAuditFlowApprovalParam {
    body: AuditFlowDTO;
}

/**
 * 批量审批通过
 */
export function postApiPricingAuditFlowApproval(param: IPostApiPricingAuditFlowApprovalParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/approval', param)
                info('mock fetch: ', url)
                option.method = 'post'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{},\\"message\\":\\"success\\"}) as Promise<ReplyVO>
              
}

export interface IPostApiPricingAuditFlowRejectParam {
    body: AuditFlowDTO;
}

/**
 * 批量审批通过
 */
export function postApiPricingAuditFlowReject(param: IPostApiPricingAuditFlowRejectParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/reject', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingAuditFlowTakeBackParam {
    body: AuditFlowDTO;
}

/**
 * 批量取回
 */
export function postApiPricingAuditFlowTakeBack(param: IPostApiPricingAuditFlowTakeBackParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/takeBack', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingAuditFlowTypeTypeIdParam {
    path?: {
        id?: number
        type?: number
        };
}

/**
 * 查看审批流-部门跟价规则明细
 */
export function getApiPricingAuditFlowTypeTypeId(param: IGetApiPricingAuditFlowTypeTypeIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/auditFlow/type/:type/:id', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"auditDetails\\":[{\\"auditErp\\":\\"zhangsan\\",\\"auditStatus\\":\\"待审批\\",\\"createdTime\\":\\"2017-05-18 20:48:05\\",\\"operatedTime\\":\\"2017-05-18 20:48:05\\"}],\\"bandMode\\":0,\\"bandType\\":\\"sales\\",\\"categoryNameList\\":[\\"string\\"],\\"deptName\\":\\"文仪业务一部\\",\\"followRuleItemList\\":[{\\"fixedBand\\":\\"ABC\\",\\"floorBand\\":1,\\"followDegreeParam\\":{\\"followObj\\":\\"OPP_page_price\\",\\"symbol\\":\\"+\\",\\"value\\":100},\\"oppIds\\":[0],\\"otherParam\\":{\\"adjustAmountLimit\\":20,\\"adjustLowerLimit\\":95,\\"adjustUpperLimit\\":95,\\"exceedAdjustAmount\\":true,\\"exceedAdjustRangeNotFollow\\":true,\\"futureNotFollowDay\\":3,\\"futureSpecialPromoNotFollow\\":true,\\"futureSpecialPromoTypeList\\":[\\"sum\\",\\"seckill\\"],\\"inSpecialPromoNotFollow\\":true,\\"inSpecialPromoTypeList\\":[\\"sum\\",\\"seckill\\"],\\"jdOutSafeStockNotFollow\\":true,\\"jdSafeStockDay\\":7,\\"onlyAdjustLower\\":true,\\"operateBase\\":\\"abs\\",\\"operateValue\\":50,\\"oppOutStockNotFollow\\":true,\\"promoLimit\\":true,\\"promoLimitNumber\\":100,\\"spreadLessRangeNotFollow\\":true},\\"riskParam\\":{\\"maxPriceRate\\":5,\\"minGpRate\\":10,\\"minVenderPriceRate\\":95},\\"upperBand\\":50}],\\"headerId\\":1001,\\"id\\":10001,\\"oppList\\":[{\\"oppoId\\":1001,\\"oppoName\\":\\"天猫超市\\",\\"url\\":\\"http://www.taobao.com\\"}],\\"ruleName\\":\\"文仪业务一部+二级：办公文具\\",\\"showApprovalBtn\\":true},\\"message\\":\\"success\\"}) as Promise<ReplyVOAuditFlowDeptFollowRuleDetailVO>
          
}

export interface IGetApiPricingBlackListParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【黑名单】
 */
export function getApiPricingBlackList(param: IGetApiPricingBlackListParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"addBlacklistBy\\":\\"zhangsan\\",\\"addBlacklistTime\\":\\"2019-04-24 16:54:00\\",\\"brandName\\":\\"晨光\\",\\"categoryName\\":\\"一级-二级-三级\\",\\"deptName\\":\\"一级-二级-三级\\",\\"salerErp\\":\\"zhangsan\\",\\"skuId\\":1001,\\"skuName\\":\\"三只松鼠休闲零食\\"}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOBlackListVO>
              
}

export interface IPostApiPricingBlackListAddParam {
    body: BlackListAddDeleteDTO;
}

/**
 * 批量添加sku到黑名单
 */
export function postApiPricingBlackListAdd(param: IPostApiPricingBlackListAddParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList/add', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingBlackListRemoveParam {
    body: BlackListAddDeleteDTO;
}

/**
 * 批量从黑名单移除sku
 */
export function postApiPricingBlackListRemove(param: IPostApiPricingBlackListRemoveParam) {

                const [ url, option ] = interceptRequest('/api/pricing/blackList/remove', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingDeptFollowRuleParam {
    query: {
        auditStatus?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【部门跟价规则】
 */
export function getApiPricingDeptFollowRule(param: IGetApiPricingDeptFollowRuleParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"auditStatusDesc\\":\\"通过\\",\\"cidName2\\":\\"办公文具\\",\\"cidName3\\":\\"笔类、本册/便签\\",\\"createdTime\\":\\"2019-04-24 16:54:00\\",\\"deptName\\":\\"文仪业务一部\\",\\"headerId\\":1001,\\"operateFlag\\":true,\\"operatedBy\\":\\"zhangsan\\",\\"operatedTime\\":\\"2019-04-24 16:54:00\\",\\"ruleName\\":\\"文仪业务一部+二级：办公文具\\",\\"validHeaderId\\":1001}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVODeptFollowRuleListVO>
              
}

export interface IPostApiPricingDeptFollowRuleParam {
    body?: DeptFollowRuleAddUpdateDTO;
}

/**
 * 保存【部门跟价规则】
 */
export function postApiPricingDeptFollowRule(param: IPostApiPricingDeptFollowRuleParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingDeptFollowRuleSubmitParam {
    body?: DeptFollowRuleAddUpdateDTO;
}

/**
 * 提交审批【部门跟价规则】
 */
export function postApiPricingDeptFollowRuleSubmit(param: IPostApiPricingDeptFollowRuleSubmitParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/submit', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingDeptFollowRuleValidRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 查看生效的【部门跟价规则】详情
 */
export function getApiPricingDeptFollowRuleValidRuleHeaderId(param: IGetApiPricingDeptFollowRuleValidRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/validRule/:headerId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"bandMode\\":0,\\"bandType\\":\\"sales\\",\\"categoryNameList\\":[\\"string\\"],\\"deptName\\":\\"文仪业务一部\\",\\"followRuleItemList\\":[null],\\"headerId\\":1001,\\"oppList\\":[null],\\"ruleName\\":\\"文仪业务一部+二级：办公文具\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVODeptFollowRuleViewVO>
              
}

export interface IGetApiPricingDeptFollowRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 编辑【部门跟价规则】详情
 */
export function getApiPricingDeptFollowRuleHeaderId(param: IGetApiPricingDeptFollowRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/:headerId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"auditErps\\":\\"zhangsan,lisi,wangwu\\",\\"auditId\\":10001,\\"auditStatus\\":0,\\"auditStatusName\\":\\"未提交\\",\\"bandMode\\":0,\\"bandType\\":\\"sales\\",\\"categoryNameList\\":[\\"string\\"],\\"deptName\\":\\"文仪业务一部\\",\\"followRuleItemList\\":[null],\\"headerId\\":1001,\\"oppList\\":[null],\\"ruleName\\":\\"文仪业务一部+二级：办公文具\\",\\"showCancelBtn\\":true,\\"showSaveBtn\\":true,\\"showSubmitBtn\\":true},\\"message\\":\\"success\\"}) as Promise<ReplyVODeptFollowRuleEditVO>
              
}

export interface IDeleteApiPricingDeptFollowRuleHeaderIdParam {
    path?: {
        headerId?: number
        };
}

/**
 * 删除【部门跟价规则】
 */
export function deleteApiPricingDeptFollowRuleHeaderId(param: IDeleteApiPricingDeptFollowRuleHeaderIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/deptFollowRule/:headerId', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingFollowPoolParam {
    query: {
        bandMode?: number
        bandType?: string
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        fixedBand?: string
        floorBand?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuFilterType?: string
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        upperBand?: number
        };
}

/**
 * 分页查询【跟价池】
 */
export function getApiPricingFollowPool(param: IGetApiPricingFollowPoolParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"cbj\\":80,\\"dpPrice\\":35,\\"dpTime\\":\\"2019-05-04 00:58:00\\",\\"erpPrice\\":80,\\"explainInfo\\":\\"友商无货\\",\\"giftPromCount\\":70,\\"gmvBand\\":\\"A\\",\\"gpRate\\":5,\\"isAutoPub\\":1,\\"lastPubTime\\":\\"2019-05-04 00:58:00\\",\\"lowestOppName\\":\\"天猫\\",\\"lowestOppSkuPrice\\":35,\\"lowestOppSkuUrl\\":\\"https://detail.tmall.com/item.htm?id=12905113259&skuId=24647771955\\",\\"packPromCount\\":70,\\"prId\\":100011,\\"promCount\\":70,\\"purchasePrice\\":24,\\"realCost\\":80,\\"redPrice\\":80,\\"showApprovalRejectBtn\\":true,\\"singlePromCount\\":70,\\"skuId\\":1001,\\"skuName\\":\\"三只松鼠休闲零食\\",\\"statusInfo\\":\\"需审批\\",\\"stock\\":1000,\\"sumPromCount\\":70,\\"topPromCount\\":70}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOFollowPoolListVO>
          
}

export interface IPostApiPricingFollowPoolAddParam {
    body: FollowPoolSkuAddDeleteDTO;
}

/**
 * 批量添加sku到跟价池
 */
export function postApiPricingFollowPoolAdd(param: IPostApiPricingFollowPoolAddParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/add', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingFollowPoolExportParam {
    query: {
        bandMode?: number
        bandType?: string
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        fixedBand?: string
        floorBand?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuFilterType?: string
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        upperBand?: number
        };
}

/**
 * 分页查询【跟价池】
 */
export function getApiPricingFollowPoolExport(param: IGetApiPricingFollowPoolExportParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/export', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingFollowPoolIsAutoPubParam {
    body?: PoolIsAutoPubUpdateDTO;
}

/**
 * 批量更新是否自动发布价格
 */
export function postApiPricingFollowPoolIsAutoPub(param: IPostApiPricingFollowPoolIsAutoPubParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/isAutoPub', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingFollowPoolRemoveParam {
    body: FollowPoolSkuAddDeleteDTO;
}

/**
 * 批量从跟价池移除sku
 */
export function postApiPricingFollowPoolRemove(param: IPostApiPricingFollowPoolRemoveParam) {

                const [ url, option ] = interceptRequest('/api/pricing/followPool/remove', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingManualAdjustPriceParam {
    body?: ManualAdjustPriceAddDTO;
}

/**
 * 调价
 */
export function postApiPricingManualAdjustPrice(param: IPostApiPricingManualAdjustPriceParam) {

                const [ url, option ] = interceptRequest('/api/pricing/manualAdjustPrice', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingOpponentParam {
    query?: {
        cidList?: Array<number>
        level?: number
        sortSign?: string
        };
}

/**
 * 通过分类获取友商信息
 */
export function getApiPricingOpponent(param: IGetApiPricingOpponentParam) {

                const [ url, option ] = interceptRequest('/api/pricing/opponent', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[null],\\"message\\":\\"success\\"}) as Promise<ReplyVOListOpponentVO>
              
}

export interface IDeleteApiPricingPromotionParam {
    body: PromotionDeleteDTO;
}

/**
 * 删除指定促销
 */
export function deleteApiPricingPromotion(param: IDeleteApiPricingPromotionParam) {

                const [ url, option ] = interceptRequest('/api/pricing/promotion', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingPromotionSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 获取sku的促销信息
 */
export function getApiPricingPromotionSkuId(param: IGetApiPricingPromotionSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/promotion/:skuId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"erpPrice\\":100,\\"name\\":\\"卡西欧（CASIO）TR750 系列相机包\\",\\"price\\":99,\\"promotions\\":[{\\"canDelete\\":true,\\"channel\\":\\"全渠道\\",\\"checkState\\":\\"完成\\",\\"detailLink\\":\\"http://p.erp.jd.com/promotionUpgrade/auditPromo.action?promoId=219525797&promoType=view\\",\\"isDps\\":true,\\"promoId\\":100001,\\"promoInfo\\":\\"一口价￥218\\",\\"promoName\\":\\"品秒-5.20\\",\\"promoTypeName\\":\\"单品\\",\\"skuId\\":100001,\\"timeBegin\\":\\"2018-05-20 00:00:00\\",\\"timeEnd\\":\\"2018-05-20 23:59:59\\"}],\\"skuId\\":100001},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromotionListVO>
          
}

export interface IPostApiPricingPublishPricingPubPriceParam {
    body?: PublishPricingDTO;
}

/**
 * 批量发布商品价格
 */
export function postApiPricingPublishPricingPubPrice(param: IPostApiPricingPublishPricingPubPriceParam) {

                const [ url, option ] = interceptRequest('/api/pricing/publishPricing/pubPrice', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingPublishPricingRejectPriceParam {
    body?: PublishPricingDTO;
}

/**
 * 批量拒绝商品价格
 */
export function postApiPricingPublishPricingRejectPrice(param: IPostApiPricingPublishPricingRejectPriceParam) {

                const [ url, option ] = interceptRequest('/api/pricing/publishPricing/rejectPrice', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingUserInputDataParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【用户录入数据】
 */
export function getApiPricingUserInputData(param: IGetApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"brandName\\":\\"晨光\\",\\"categoryInfo\\":\\"图书-教育-少儿\\",\\"cbj\\":24,\\"fromData\\":\\"2019-03-05\\",\\"id\\":1001,\\"marketPrice\\":24,\\"maximumPrice\\":24,\\"minimumPrice\\":24,\\"priceLimitTypeDesc\\":\\"供应商限价\\",\\"priceLimitWayDesc\\":\\"固定约束\\",\\"purchasePrice\\":24,\\"realCost\\":24,\\"redPrice\\":24,\\"remark\\":\\"满20-5\\",\\"skuId\\":1001,\\"skuName\\":\\"晨光黑色碳素笔\\",\\"toData\\":\\"2019-03-08\\"}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOUserInputDataListVO>
              
}

export interface IPostApiPricingUserInputDataParam {
    body?: UserInputDataAddUpdateDTO;
}

/**
 * 新增、修改【用户录入数据】
 */
export function postApiPricingUserInputData(param: IPostApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IDeleteApiPricingUserInputDataParam {
    body: UserInputDataDeleteDTO;
}

/**
 * 批量删除【用户录入数据】
 */
export function deleteApiPricingUserInputData(param: IDeleteApiPricingUserInputDataParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":0,\\"message\\":\\"success\\"}) as Promise<ReplyVOInt>
              
}

export interface IGetApiPricingUserInputDataExportParam {
    query: {
        brandId?: number
        cid?: number
        deptId3: string
        endIndex?: number
        level?: number
        pageNo?: number
        pageSize?: number
        skuList?: Array<number>
        sortSign?: string
        startIndex?: number
        };
}

/**
 * 分页查询【用户录入数据】
 */
export function getApiPricingUserInputDataExport(param: IGetApiPricingUserInputDataExportParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/export', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IPostApiPricingUserInputDataUploadParam {
    formData: {
        file: File
        };
}

/**
 * 导入【用户录入数据】
 */
export function postApiPricingUserInputDataUpload(param: IPostApiPricingUserInputDataUploadParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/upload', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiPricingUserInputDataIdParam {
    path?: {
        id?: number
        };
}

/**
 * 查看【用户录入数据】详情
 */
export function getApiPricingUserInputDataId(param: IGetApiPricingUserInputDataIdParam) {

                const [ url, option ] = interceptRequest('/api/pricing/userInputData/:id', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"fromData\\":\\"2019-03-05\\",\\"id\\":1001,\\"maximumPrice\\":24,\\"minimumPrice\\":24,\\"priceLimitType\\":1,\\"priceLimitWay\\":1,\\"realCost\\":24,\\"remark\\":\\"满20-5\\",\\"skuId\\":1001,\\"toData\\":\\"2019-03-08\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOUserInputDataEditVO>
              
}
"
`;

exports[`generateRequests projectB paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { ReplyVOListOpponentVO, ReplyVOPageVOCisSkuListVO, ReplyVOListPriceHistoryVO, CisMatchInfoDTO, ReplyVOVoid, SkuMatchDTO, ReplyVOListOpponentSkuListVO, CisSkuDTO, ReplyVOConfigVO, ReplyVOCisSkuShowVO } from \\"./definitions\\";

export interface IGetApiCompetitionOpponentParam {
    query?: {
        skuId?: number
        };
}

/**
 * 查询【友商】
 */
export function getApiCompetitionOpponent(param: IGetApiCompetitionOpponentParam) {

                const [ url, option ] = interceptRequest('/api/competition/opponent', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListOpponentVO>(interceptResponse)
              
}

export interface IGetApiCompetitionSkuParam {
    query?: {
        blackListStatus?: boolean
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: Array<string>
        deptLevel?: number
        endIndex?: number
        gmvBand?: Array<string>
        matchStatus?: boolean
        monitorStatus?: boolean
        orderBy?: string
        orderType?: string
        pageNo?: number
        pageSize?: number
        priceTag?: number
        priceType?: number
        pvBand?: Array<string>
        salerErp?: string
        salerErps?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        skuIds?: Array<number>
        skuName?: string
        startIndex?: number
        };
}

/**
 * 分页查询【比价sku】
 */
export function getApiCompetitionSku(param: IGetApiCompetitionSkuParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOCisSkuListVO>(interceptResponse)
              
}

export interface IGetApiCompetitionSkuHistorySkuIdParam {
    query?: {
        priceType?: number
        };
    path?: {
        skuId?: number
        };
}

/**
 * 查看【价格历史】详情
 */
export function getApiCompetitionSkuHistorySkuId(param: IGetApiCompetitionSkuHistorySkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/history/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceHistoryVO>(interceptResponse)
              
}

export interface IPostApiCompetitionSkuMatchParam {
    body: CisMatchInfoDTO;
}

/**
 * 新增【比价匹配商品】
 */
export function postApiCompetitionSkuMatch(param: IPostApiCompetitionSkuMatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IDeleteApiCompetitionSkuMatchParam {
    body: SkuMatchDTO;
}

/**
 * 批量删除【比价匹配商品】
 */
export function deleteApiCompetitionSkuMatch(param: IDeleteApiCompetitionSkuMatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IPostApiCompetitionSkuMatchBatchParam {
    formData: {
        file: File
        };
}

/**
 * 批量新增【比价匹配商品】
 */
export function postApiCompetitionSkuMatchBatch(param: IPostApiCompetitionSkuMatchBatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match/batch', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IGetApiCompetitionSkuMatchSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 查询【友商sku】
 */
export function getApiCompetitionSkuMatchSkuId(param: IGetApiCompetitionSkuMatchSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListOpponentSkuListVO>(interceptResponse)
              
}

export interface IGetApiCompetitionSkuMonitorParam {
    query?: {
        blackListStatus?: boolean
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: Array<string>
        deptLevel?: number
        endIndex?: number
        gmvBand?: Array<string>
        matchStatus?: boolean
        monitorStatus?: boolean
        orderBy?: string
        orderType?: string
        pageNo?: number
        pageSize?: number
        priceTag?: number
        priceType?: number
        pvBand?: Array<string>
        salerErp?: string
        salerErps?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        skuIds?: Array<number>
        skuName?: string
        startIndex?: number
        };
}

/**
 * 分页查询【比价重点关注商品】
 */
export function getApiCompetitionSkuMonitor(param: IGetApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOCisSkuListVO>(interceptResponse)
              
}

export interface IPostApiCompetitionSkuMonitorParam {
    body: CisSkuDTO;
}

/**
 * 批量新增【比价重点关注商品】
 */
export function postApiCompetitionSkuMonitor(param: IPostApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IDeleteApiCompetitionSkuMonitorParam {
    body: CisSkuDTO;
}

/**
 * 批量删除【比价重点关注商品】
 */
export function deleteApiCompetitionSkuMonitor(param: IDeleteApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

/**
 * 查询监控提示【比价重点关注商品】
 */
export function getApiCompetitionSkuMonitorGetConfig() {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor/getConfig')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOConfigVO>(interceptResponse)
              
}

export interface IGetApiCompetitionSkuSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 查看【比价sku】详情
 */
export function getApiCompetitionSkuSkuId(param: IGetApiCompetitionSkuSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOCisSkuShowVO>(interceptResponse)
              
}
"
`;

exports[`generateRequests projectB paths 2`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { ReplyVOListOpponentVO, ReplyVOPageVOCisSkuListVO, ReplyVOListPriceHistoryVO, CisMatchInfoDTO, ReplyVOVoid, SkuMatchDTO, ReplyVOListOpponentSkuListVO, CisSkuDTO, ReplyVOConfigVO, ReplyVOCisSkuShowVO } from \\"./definitions\\";

const { info } = console

export interface IGetApiCompetitionOpponentParam {
    query?: {
        skuId?: number
        };
}

/**
 * 查询【友商】
 */
export function getApiCompetitionOpponent(param: IGetApiCompetitionOpponentParam) {

                const [ url, option ] = interceptRequest('/api/competition/opponent', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"opponentId\\":1,\\"opponentName\\":1}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListOpponentVO>
              
}

export interface IGetApiCompetitionSkuParam {
    query?: {
        blackListStatus?: boolean
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: Array<string>
        deptLevel?: number
        endIndex?: number
        gmvBand?: Array<string>
        matchStatus?: boolean
        monitorStatus?: boolean
        orderBy?: string
        orderType?: string
        pageNo?: number
        pageSize?: number
        priceTag?: number
        priceType?: number
        pvBand?: Array<string>
        salerErp?: string
        salerErps?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        skuIds?: Array<number>
        skuName?: string
        startIndex?: number
        };
}

/**
 * 分页查询【比价sku】
 */
export function getApiCompetitionSku(param: IGetApiCompetitionSkuParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"basePrice\\":21.3,\\"blackListStatus\\":true,\\"cbj\\":11.3,\\"conversion\\":0.11,\\"dealPrice\\":21.3,\\"dealPriceLastTime\\":\\"2019-09-03T00:00:00.000Z\\",\\"dealPriceMargin\\":20,\\"id\\":1,\\"imgUrl\\":\\"http://img10.360buyimg.com/imgzone/jfs/t1/14727/6/9505/734417/5c7e3b92E19e74a47/63e4c88feec73947.jpg\\",\\"jdPrice\\":19.3,\\"matchStatus\\":true,\\"monitorStatus\\":true,\\"opponentMin\\":{\\"attentionType\\":false,\\"basePrice\\":21.3,\\"dealPrice\\":21.3,\\"id\\":1,\\"imgUrl\\":\\"https://imgservice.suning.cn/uimg1/b2c/image/lqNY4fOrFbXVxrciwQt01w.jpg_120w_120h_4e\\",\\"opponentId\\":1,\\"opponentProductId\\":1,\\"opponentShopTypeName\\":\\"天猫旗舰店\\",\\"opponentSkuId\\":\\"122200ddd\\",\\"opponentSkuName\\":\\"海飞丝\\",\\"opponentUpdatedTime\\":\\"2017-12-07 00:00:00\\",\\"promoInfo\\":\\"满100-99\\",\\"redPrice\\":22.3,\\"url\\":\\"https://product.suning.com/0000000000/104549193.html\\"},\\"priceTag\\":1,\\"promoInfo\\":\\"满100-99\\",\\"pv\\":122,\\"redPrice\\":22.3,\\"redPriceMargin\\":-20,\\"redPriceUpdatedTime\\":\\"2017-12-07 00:00:00\\",\\"saleQtty\\":11.2,\\"salerErp\\":\\"bjttt\\",\\"skuId\\":910151,\\"skuName\\":\\"海飞丝\\",\\"stock\\":11.2,\\"uv\\":22}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOCisSkuListVO>
          
}

export interface IGetApiCompetitionSkuHistorySkuIdParam {
    query?: {
        priceType?: number
        };
    path?: {
        skuId?: number
        };
}

/**
 * 查看【价格历史】详情
 */
export function getApiCompetitionSkuHistorySkuId(param: IGetApiCompetitionSkuHistorySkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/history/:skuId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"opponentId\\":\\"天猫\\",\\"opponentName\\":\\"天猫\\",\\"prices\\":[{\\"date\\":\\"2017-12-07 00:00:00\\",\\"price\\":22.3}],\\"sku\\":\\"122200ddd\\"}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPriceHistoryVO>
              
}

export interface IPostApiCompetitionSkuMatchParam {
    body: CisMatchInfoDTO;
}

/**
 * 新增【比价匹配商品】
 */
export function postApiCompetitionSkuMatch(param: IPostApiCompetitionSkuMatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match', param)
                info('mock fetch: ', url)
                option.method = 'post'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"message\\":\\"success\\"}) as Promise<ReplyVOVoid>
              
}

export interface IDeleteApiCompetitionSkuMatchParam {
    body: SkuMatchDTO;
}

/**
 * 批量删除【比价匹配商品】
 */
export function deleteApiCompetitionSkuMatch(param: IDeleteApiCompetitionSkuMatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IPostApiCompetitionSkuMatchBatchParam {
    formData: {
        file: File
        };
}

/**
 * 批量新增【比价匹配商品】
 */
export function postApiCompetitionSkuMatchBatch(param: IPostApiCompetitionSkuMatchBatchParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match/batch', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiCompetitionSkuMatchSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 查询【友商sku】
 */
export function getApiCompetitionSkuMatchSkuId(param: IGetApiCompetitionSkuMatchSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/match/:skuId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"attentionType\\":false,\\"dealPrice\\":21.3,\\"id\\":1,\\"imgUrl\\":\\"https://imgservice.suning.cn/uimg1/b2c/image/lqNY4fOrFbXVxrciwQt01w.jpg_120w_120h_4e\\",\\"opponentId\\":1,\\"opponentName\\":1,\\"opponentProductId\\":1,\\"opponentSkuId\\":\\"122200ddd\\",\\"opponentSkuName\\":\\"海飞丝\\",\\"opponentUpdatedTime\\":\\"2017-12-07 00:00:00\\",\\"promoInfo\\":\\"满100-99\\",\\"redPrice\\":22.3,\\"url\\":\\"https://product.suning.com/0000000000/104549193.html\\"}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListOpponentSkuListVO>
          
}

export interface IGetApiCompetitionSkuMonitorParam {
    query?: {
        blackListStatus?: boolean
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: Array<string>
        deptLevel?: number
        endIndex?: number
        gmvBand?: Array<string>
        matchStatus?: boolean
        monitorStatus?: boolean
        orderBy?: string
        orderType?: string
        pageNo?: number
        pageSize?: number
        priceTag?: number
        priceType?: number
        pvBand?: Array<string>
        salerErp?: string
        salerErps?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        skuIds?: Array<number>
        skuName?: string
        startIndex?: number
        };
}

/**
 * 分页查询【比价重点关注商品】
 */
export function getApiCompetitionSkuMonitor(param: IGetApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IPostApiCompetitionSkuMonitorParam {
    body: CisSkuDTO;
}

/**
 * 批量新增【比价重点关注商品】
 */
export function postApiCompetitionSkuMonitor(param: IPostApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IDeleteApiCompetitionSkuMonitorParam {
    body: CisSkuDTO;
}

/**
 * 批量删除【比价重点关注商品】
 */
export function deleteApiCompetitionSkuMonitor(param: IDeleteApiCompetitionSkuMonitorParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

/**
 * 查询监控提示【比价重点关注商品】
 */
export function getApiCompetitionSkuMonitorGetConfig() {

                const [ url, option ] = interceptRequest('/api/competition/sku/monitor/getConfig')
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"hour\\":0,\\"num\\":0},\\"message\\":\\"success\\"}) as Promise<ReplyVOConfigVO>
              
}

export interface IGetApiCompetitionSkuSkuIdParam {
    path?: {
        skuId?: number
        };
}

/**
 * 查看【比价sku】详情
 */
export function getApiCompetitionSkuSkuId(param: IGetApiCompetitionSkuSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/competition/sku/:skuId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"basePrice\\":21.3,\\"blackListStatus\\":true,\\"cbj\\":11.3,\\"conversion\\":0.11,\\"dealPrice\\":21.3,\\"dealPriceLastTime\\":\\"2019-09-03T00:00:00.000Z\\",\\"dealPriceMargin\\":20,\\"id\\":1,\\"imgUrl\\":\\"http://img10.360buyimg.com/imgzone/jfs/t1/14727/6/9505/734417/5c7e3b92E19e74a47/63e4c88feec73947.jpg\\",\\"jdPrice\\":19.3,\\"matchStatus\\":true,\\"monitorStatus\\":true,\\"priceTag\\":1,\\"promoInfo\\":\\"满100-99\\",\\"pv\\":122,\\"redPrice\\":22.3,\\"redPriceMargin\\":-20,\\"redPriceUpdatedTime\\":\\"2017-12-07 00:00:00\\",\\"saleQtty\\":11.2,\\"salerErp\\":\\"bjttt\\",\\"skuId\\":910151,\\"skuName\\":\\"海飞丝\\",\\"stock\\":11.2,\\"uv\\":22},\\"message\\":\\"success\\"}) as Promise<ReplyVOCisSkuShowVO>
          
}
"
`;

exports[`generateRequests projectC paths 1`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { EsIndexAddDTO, ReplyVOInt, ReplyVOVoid, ReplyVOChartResultVOPriceCompeteChartListVO, ReplyVOPriceCompeteSumVO, ReplyVOListPriceEcAnalysisBrandVO, ReplyVOListPriceEcAnalysisCatVO, ReplyVOListPriceEcAnalysisDeptVO, ReplyVOPriceEcAnalysisHomeIndexVO, ReplyVOListPriceEcAnalysisSalerVO, ReplyVOPriceEcAnalysisTopVO, ReplyVOChartResultVOPriceHonestChartListVO, ReplyVOListPriceHonestSkuListVO, ReplyVOPriceHonestSumVO, ReplyVOChartResultVOPriceWaveChartListVO, ReplyVOListPriceWaveSkuListVO, ReplyVOPriceWaveSumVO, ReplyVOPromoAnalysisSumVO, ReplyVOPromoAnalysisChartVO, ReplyVOSetPromoDeptTreeVO, ReplyVOPromoAnalysisHomeIndexVO, ReplyVOPromoAnalysisPromoResultVO, ReplyVOPageVOPromoAnalysisPromoSkuVO, ReplyVOPromoAnalysisSkuResultVO, ReplyVOReportTaskShowVO, ReportTaskDeleteQO, ReplyVO, ReplyVOPageVOReportTaskInstanceVO, ReplyVOPageVOReportTaskListVO, ReportRetryQO, ReportTaskAddDTO, ReportTaskUpdateDTO, ReplyVOPageVOSkuBlacklistListVO, SkuBlacklistAddDTO, SkuBlacklistDeleteQO, ReplyVOListTopBrandListVO, ListBrandVO, TopBrandAddDTO, TopBrandDeleteQO, ReplyVOMarkdownPriceCalcVO, ReplyVOMarkdownSaleSimulateVO, ReplyVOMarkdownTrendSimulateVO, ReplyVOSimulateSkuVO, ReplyVOListSkuHistoryDTO, ReplyVOPageVOSimulateSkuVO, ReplyVOListSaleSimulateTableVO, ReplyVOSaleSimulateVO, PromoRoQO, PromoOverlayRiskDTO, ReplyVOListPromoResponse, ReplyVOMapLongBoolean, ReplyVOPromoRoVO, ReplyVOListSelectOptionVOInt, ReplyVOPageVOPromoSimulateDetailVO, ReplyVOPromoSimulateTotalVO } from \\"./definitions\\";

export interface IPostApiDataboardBoardEsCreateIndexParam {
    body?: EsIndexAddDTO;
    formData: {
        file: File
        };
    query: {
        indexAlias: string
        indexNames: Array<string>
        };
}

/**
 * 创建索引
 */
export function postApiDataboardBoardEsCreateIndex(param: IPostApiDataboardBoardEsCreateIndexParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/es/createIndex', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOInt>(interceptResponse)
              
}

export interface IDeleteApiDataboardBoardEsDelIndexParam {
    body?: Array<string>;
}

/**
 * 删除索引
 */
export function deleteApiDataboardBoardEsDelIndex(param: IDeleteApiDataboardBoardEsDelIndexParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/es/delIndex', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVOInt>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceCompeteExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        opponentCode?: string
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: string;
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceCompeteExportChart(param: IGetApiDataboardBoardPriceCompeteExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/exportChart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceCompeteListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        opponentCode?: string
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格竞争力-图表、列表】
 */
export function getApiDataboardBoardPriceCompeteList(param: IGetApiDataboardBoardPriceCompeteListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOChartResultVOPriceCompeteChartListVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceCompeteShowSummaryParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询实时汇总数据【价格竞争力-实时数据(汇总部分)】
 */
export function getApiDataboardBoardPriceCompeteShowSummary(param: IGetApiDataboardBoardPriceCompeteShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/showSummary', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceCompeteSumVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisBrandListParam {
    query?: {
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 品牌下钻
 */
export function getApiDataboardBoardPriceEcAnalysisBrandList(param: IGetApiDataboardBoardPriceEcAnalysisBrandListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/brandList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisBrandVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisCatListParam {
    query?: {
        catLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 品类下钻
 */
export function getApiDataboardBoardPriceEcAnalysisCatList(param: IGetApiDataboardBoardPriceEcAnalysisCatListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/catList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisCatVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisDeptListParam {
    query?: {
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 部门下钻
 */
export function getApiDataboardBoardPriceEcAnalysisDeptList(param: IGetApiDataboardBoardPriceEcAnalysisDeptListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/deptList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisDeptVO>(interceptResponse)
              
}

/**
 * 首页指标
 */
export function getApiDataboardBoardPriceEcAnalysisHomeIndex() {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/homeIndex')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceEcAnalysisHomeIndexVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisSalerListParam {
    query?: {
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 采销下钻
 */
export function getApiDataboardBoardPriceEcAnalysisSalerList(param: IGetApiDataboardBoardPriceEcAnalysisSalerListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/salerList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceEcAnalysisSalerVO>(interceptResponse)
              
}

/**
 * 3个top1
 */
export function getApiDataboardBoardPriceEcAnalysisTop() {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/top')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceEcAnalysisTopVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceHonestExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: string;
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceHonestExportChart(param: IGetApiDataboardBoardPriceHonestExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/exportChart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceHonestExportListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
    body: string;
}

/**
 * 查看更多（导出）
 */
export function getApiDataboardBoardPriceHonestExportListSku(param: IGetApiDataboardBoardPriceHonestExportListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/exportListSku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceHonestListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格诚信度-图表、列表】
 */
export function getApiDataboardBoardPriceHonestList(param: IGetApiDataboardBoardPriceHonestListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOChartResultVOPriceHonestChartListVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceHonestListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询T+1sku数据【价格竞争力T+1数据(sku部分)】
 */
export function getApiDataboardBoardPriceHonestListSku(param: IGetApiDataboardBoardPriceHonestListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/listSku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceHonestSkuListVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceHonestShowSummaryParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询T+1汇总数据【价格竞争力T+1数据(汇总部分)】
 */
export function getApiDataboardBoardPriceHonestShowSummary(param: IGetApiDataboardBoardPriceHonestShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/showSummary', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceHonestSumVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceWaveExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: string;
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceWaveExportChart(param: IGetApiDataboardBoardPriceWaveExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/exportChart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceWaveListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格波动性-图表、列表】
 */
export function getApiDataboardBoardPriceWaveList(param: IGetApiDataboardBoardPriceWaveListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOChartResultVOPriceWaveChartListVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceWaveListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询时间段内sku数据【价格波动性-时间段内数据(sku部分)】
 */
export function getApiDataboardBoardPriceWaveListSku(param: IGetApiDataboardBoardPriceWaveListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/listSku', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListPriceWaveSkuListVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPriceWaveShowSummaryParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询时间段内汇总数据【价格波动性-时间段内数据(汇总部分)】
 */
export function getApiDataboardBoardPriceWaveShowSummary(param: IGetApiDataboardBoardPriceWaveShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/showSummary', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPriceWaveSumVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPromoAnalysisBenchmarkingParam {
    query?: {
        cid?: number
        deptId?: string
        monthRange?: Array<string>
        };
}

/**
 * 对标均值
 */
export function getApiDataboardBoardPromoAnalysisBenchmarking(param: IGetApiDataboardBoardPromoAnalysisBenchmarkingParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/benchmarking', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisSumVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPromoAnalysisChartParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 明细分析(3张图表)
 */
export function getApiDataboardBoardPromoAnalysisChart(param: IGetApiDataboardBoardPromoAnalysisChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/chart', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisChartVO>(interceptResponse)
              
}

/**
 * 获取所有部门
 */
export function getApiDataboardBoardPromoAnalysisDept() {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/dept')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSetPromoDeptTreeVO>(interceptResponse)
              
}

/**
 * 首页指标
 */
export function getApiDataboardBoardPromoAnalysisHomeIndex() {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/homeIndex')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisHomeIndexVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPromoAnalysisPromoListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        promoDeptName?: string
        promoId?: number
        promoStatus?: number
        promoSubType?: number
        promoType?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 促销下钻
 */
export function getApiDataboardBoardPromoAnalysisPromoList(param: IGetApiDataboardBoardPromoAnalysisPromoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/promoList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisPromoResultVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPromoAnalysisPromoSkuListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        promoId?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 促销商品列表
 */
export function getApiDataboardBoardPromoAnalysisPromoSkuList(param: IGetApiDataboardBoardPromoAnalysisPromoSkuListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/promoSkuList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOPromoAnalysisPromoSkuVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardPromoAnalysisSkuListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: number
        };
}

/**
 * 商品下钻
 */
export function getApiDataboardBoardPromoAnalysisSkuList(param: IGetApiDataboardBoardPromoAnalysisSkuListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/skuList', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoAnalysisSkuResultVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardReportTaskConfigIdParam {
    path?: {
        id?: number
        };
}

/**
 * 查看【报表任务】详情
 */
export function getApiDataboardBoardReportTaskConfigId(param: IGetApiDataboardBoardReportTaskConfigIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/config/:id', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOReportTaskShowVO>(interceptResponse)
              
}

export interface IDeleteApiDataboardBoardReportTaskDeleteBatchParam {
    body?: ReportTaskDeleteQO;
}

/**
 * 批量删除【报表任务】
 */
export function deleteApiDataboardBoardReportTaskDeleteBatch(param: IDeleteApiDataboardBoardReportTaskDeleteBatchParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/deleteBatch', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardReportTaskInstanceListParam {
    query?: {
        pageNo?: number
        pageSize?: number
        taskId?: number
        };
}

/**
 * 查看【报表任务】执行详情
 */
export function getApiDataboardBoardReportTaskInstanceList(param: IGetApiDataboardBoardReportTaskInstanceListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/instance/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOReportTaskInstanceVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardReportTaskListParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 分页查询【报表任务】
 */
export function getApiDataboardBoardReportTaskList(param: IGetApiDataboardBoardReportTaskListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOReportTaskListVO>(interceptResponse)
              
}

export interface IPostApiDataboardBoardReportTaskRetryParam {
    body?: ReportRetryQO;
}

/**
 * 手动触发【报表任务】
 */
export function postApiDataboardBoardReportTaskRetry(param: IPostApiDataboardBoardReportTaskRetryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/retry', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPostApiDataboardBoardReportTaskSaveParam {
    body?: ReportTaskAddDTO;
}

/**
 * 新增【报表任务】
 */
export function postApiDataboardBoardReportTaskSave(param: IPostApiDataboardBoardReportTaskSaveParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/save', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IPutApiDataboardBoardReportTaskUpdateParam {
    body?: ReportTaskUpdateDTO;
}

/**
 * 修改【报表任务】
 */
export function putApiDataboardBoardReportTaskUpdate(param: IPutApiDataboardBoardReportTaskUpdateParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/update', param)
                option.method = 'put'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardSkuBlacklistParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 分页查询【sku黑名单设置】
 */
export function getApiDataboardBoardSkuBlacklist(param: IGetApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOSkuBlacklistListVO>(interceptResponse)
              
}

export interface IPostApiDataboardBoardSkuBlacklistParam {
    body?: SkuBlacklistAddDTO;
}

/**
 * 新增【sku黑名单设置】
 */
export function postApiDataboardBoardSkuBlacklist(param: IPostApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IDeleteApiDataboardBoardSkuBlacklistParam {
    body?: SkuBlacklistDeleteQO;
}

/**
 * 批量删除【sku黑名单设置】
 */
export function deleteApiDataboardBoardSkuBlacklist(param: IDeleteApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiDataboardBoardSkuBlacklistExportParam {
    query?: {
        exportEmail?: string
        };
}

/**
 * 导出【sku黑名单设置】
 */
export function getApiDataboardBoardSkuBlacklistExport(param: IGetApiDataboardBoardSkuBlacklistExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

/**
 * 分页查询【重点品牌监控设置】
 */
export function getApiDataboardBoardTopBrand() {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand')
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListTopBrandListVO>(interceptResponse)
              
}

export interface IPostApiDataboardBoardTopBrandParam {
    body: ListBrandVO;
}

/**
 * 新增【重点品牌监控设置】
 */
export function postApiDataboardBoardTopBrand(param: IPostApiDataboardBoardTopBrandParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IDeleteApiDataboardBoardTopBrandParam {
    path?: {
        id?: number
        };
    body: TopBrandDeleteQO;
}

/**
 * 按id查询【重点品牌监控设置】
 */
export function deleteApiDataboardBoardTopBrand(param: IDeleteApiDataboardBoardTopBrandParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand', param)
                option.method = 'delete'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceMarkdownSimulateCalcParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 建议价格计算接口
 */
export function getApiDataboardPriceMarkdownSimulateCalc(param: IGetApiDataboardPriceMarkdownSimulateCalcParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/calc', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOMarkdownPriceCalcVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceMarkdownSimulateExportParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
    body: string;
}

/**
 * 历史量价明细导出
 */
export function getApiDataboardPriceMarkdownSimulateExport(param: IGetApiDataboardPriceMarkdownSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceMarkdownSimulateSaleParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 量价关系模拟接口
 */
export function getApiDataboardPriceMarkdownSimulateSale(param: IGetApiDataboardPriceMarkdownSimulateSaleParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/sale', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOMarkdownSaleSimulateVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceMarkdownSimulateTrendParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 清理量趋势预测接口
 */
export function getApiDataboardPriceMarkdownSimulateTrend(param: IGetApiDataboardPriceMarkdownSimulateTrendParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/trend', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOMarkdownTrendSimulateVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceMarkdownSimulateSkuIdParam {
    path: {
        skuId: number
        };
}

/**
 * 查询sku详情
 */
export function getApiDataboardPriceMarkdownSimulateSkuId(param: IGetApiDataboardPriceMarkdownSimulateSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSimulateSkuVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceSaleSimulateExportParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
    body: string;
}

/**
 * 历史量价明细导出
 */
export function getApiDataboardPriceSaleSimulateExport(param: IGetApiDataboardPriceSaleSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceSaleSimulateHistoryParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
}

/**
 * 历史数据明细
 */
export function getApiDataboardPriceSaleSimulateHistory(param: IGetApiDataboardPriceSaleSimulateHistoryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/history', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSkuHistoryDTO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceSaleSimulateListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthPriceChange?: number
        pageNo?: number
        pageSize?: number
        potentialType?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuIds?: string
        sortType?: string
        };
}

/**
 * 分页查询【销售优化模拟商品列表】
 */
export function getApiDataboardPriceSaleSimulateList(param: IGetApiDataboardPriceSaleSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOSimulateSkuVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceSaleSimulateShowTableParam {
    query?: {
        endDate?: string
        maxPrice?: number
        maxPv?: number
        minPrice?: number
        minPv?: number
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDate?: string
        };
}

/**
 * 按pv分段展示表格
 */
export function getApiDataboardPriceSaleSimulateShowTable(param: IGetApiDataboardPriceSaleSimulateShowTableParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/showTable', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSaleSimulateTableVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceSaleSimulateSimulateParam {
    query?: {
        endDate?: string
        maxPrice?: number
        maxPv?: number
        minPrice?: number
        minPv?: number
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDate?: string
        };
}

/**
 * 销售优化模拟
 */
export function getApiDataboardPriceSaleSimulateSimulate(param: IGetApiDataboardPriceSaleSimulateSimulateParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/simulate', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSaleSimulateVO>(interceptResponse)
              
}

export interface IGetApiDataboardPriceSaleSimulateSkuIdParam {
    path: {
        skuId: number
        };
}

/**
 * 查询sku详情
 */
export function getApiDataboardPriceSaleSimulateSkuId(param: IGetApiDataboardPriceSaleSimulateSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/:skuId', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOSimulateSkuVO>(interceptResponse)
              
}

export interface IGetApiDataboardPromoRoExportParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 选品导出【Get方法】
 */
export function getApiDataboardPromoRoExport(param: IGetApiDataboardPromoRoExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IPostApiDataboardPromoRoExportParam {
    body: PromoRoQO;
}

/**
 * 选品导出【Post方法】
 */
export function postApiDataboardPromoRoExport(param: IPostApiDataboardPromoRoExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/export', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IPostApiDataboardPromoRoFindOverlayPromoParam {
    body: PromoOverlayRiskDTO;
}

/**
 * 查询sku有叠加风险的其他促销
 */
export function postApiDataboardPromoRoFindOverlayPromo(param: IPostApiDataboardPromoRoFindOverlayPromoParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/findOverlayPromo', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOListPromoResponse>(interceptResponse)
              
}

export interface IPostApiDataboardPromoRoFindOverlayRiskParam {
    body: PromoOverlayRiskDTO;
}

/**
 * 查询sku是否有叠加其他促销风险
 */
export function postApiDataboardPromoRoFindOverlayRisk(param: IPostApiDataboardPromoRoFindOverlayRiskParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/findOverlayRisk', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOMapLongBoolean>(interceptResponse)
              
}

export interface IGetApiDataboardPromoRoListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 查询选品【Get方法】
 */
export function getApiDataboardPromoRoList(param: IGetApiDataboardPromoRoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoRoVO>(interceptResponse)
              
}

export interface IPostApiDataboardPromoRoListParam {
    body: PromoRoQO;
}

/**
 * 查询选品【Post方法】
 */
export function postApiDataboardPromoRoList(param: IPostApiDataboardPromoRoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/list', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOPromoRoVO>(interceptResponse)
              
}

export interface IGetApiDataboardPromoRoSubTypesParam {
    query: {
        promoType: number
        };
}

/**
 * 根据促销类型查询促销子类型列表
 */
export function getApiDataboardPromoRoSubTypes(param: IGetApiDataboardPromoRoSubTypesParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/subTypes', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSelectOptionVOInt>(interceptResponse)
              
}

export interface IGetApiDataboardPromoSimulateExportParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 模拟导出【Get方法】
 */
export function getApiDataboardPromoSimulateExport(param: IGetApiDataboardPromoSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/export', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IPostApiDataboardPromoSimulateExportParam {
    body: PromoRoQO;
}

/**
 * 模拟导出【Post方法】
 */
export function postApiDataboardPromoSimulateExport(param: IPostApiDataboardPromoSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/export', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOVoid>(interceptResponse)
              
}

export interface IGetApiDataboardPromoSimulateListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 效果模拟【Get方法】
 */
export function getApiDataboardPromoSimulateList(param: IGetApiDataboardPromoSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/list', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPageVOPromoSimulateDetailVO>(interceptResponse)
              
}

export interface IPostApiDataboardPromoSimulateListParam {
    body: PromoRoQO;
}

/**
 * 效果模拟【Post方法】
 */
export function postApiDataboardPromoSimulateList(param: IPostApiDataboardPromoSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/list', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOPageVOPromoSimulateDetailVO>(interceptResponse)
              
}

export interface IGetApiDataboardPromoSimulateSubTypesParam {
    query: {
        promoType: number
        };
}

/**
 * 根据促销类型查询促销子类型列表
 */
export function getApiDataboardPromoSimulateSubTypes(param: IGetApiDataboardPromoSimulateSubTypesParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/subTypes', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOListSelectOptionVOInt>(interceptResponse)
              
}

export interface IGetApiDataboardPromoSimulateTotalParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 效果模拟汇总【Get方法】
 */
export function getApiDataboardPromoSimulateTotal(param: IGetApiDataboardPromoSimulateTotalParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/total', param)
                option.method = 'get'
                return fetch(url, option).then<ReplyVOPromoSimulateTotalVO>(interceptResponse)
              
}

export interface IPostApiDataboardPromoSimulateTotalParam {
    body: PromoRoQO;
}

/**
 * 效果模拟汇总【Post方法】
 */
export function postApiDataboardPromoSimulateTotal(param: IPostApiDataboardPromoSimulateTotalParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/total', param)
                option.method = 'post'
                return fetch(url, option).then<ReplyVOPromoSimulateTotalVO>(interceptResponse)
              
}
"
`;

exports[`generateRequests projectC paths 2`] = `
"import { interceptRequest, interceptResponse } from \\"./interceptor\\";
import { EsIndexAddDTO, ReplyVOInt, ReplyVOVoid, ReplyVOChartResultVOPriceCompeteChartListVO, ReplyVOPriceCompeteSumVO, ReplyVOListPriceEcAnalysisBrandVO, ReplyVOListPriceEcAnalysisCatVO, ReplyVOListPriceEcAnalysisDeptVO, ReplyVOPriceEcAnalysisHomeIndexVO, ReplyVOListPriceEcAnalysisSalerVO, ReplyVOPriceEcAnalysisTopVO, ReplyVOChartResultVOPriceHonestChartListVO, ReplyVOListPriceHonestSkuListVO, ReplyVOPriceHonestSumVO, ReplyVOChartResultVOPriceWaveChartListVO, ReplyVOListPriceWaveSkuListVO, ReplyVOPriceWaveSumVO, ReplyVOPromoAnalysisSumVO, ReplyVOPromoAnalysisChartVO, ReplyVOSetPromoDeptTreeVO, ReplyVOPromoAnalysisHomeIndexVO, ReplyVOPromoAnalysisPromoResultVO, ReplyVOPageVOPromoAnalysisPromoSkuVO, ReplyVOPromoAnalysisSkuResultVO, ReplyVOReportTaskShowVO, ReportTaskDeleteQO, ReplyVO, ReplyVOPageVOReportTaskInstanceVO, ReplyVOPageVOReportTaskListVO, ReportRetryQO, ReportTaskAddDTO, ReportTaskUpdateDTO, ReplyVOPageVOSkuBlacklistListVO, SkuBlacklistAddDTO, SkuBlacklistDeleteQO, ReplyVOListTopBrandListVO, ListBrandVO, TopBrandAddDTO, TopBrandDeleteQO, ReplyVOMarkdownPriceCalcVO, ReplyVOMarkdownSaleSimulateVO, ReplyVOMarkdownTrendSimulateVO, ReplyVOSimulateSkuVO, ReplyVOListSkuHistoryDTO, ReplyVOPageVOSimulateSkuVO, ReplyVOListSaleSimulateTableVO, ReplyVOSaleSimulateVO, PromoRoQO, PromoOverlayRiskDTO, ReplyVOListPromoResponse, ReplyVOMapLongBoolean, ReplyVOPromoRoVO, ReplyVOListSelectOptionVOInt, ReplyVOPageVOPromoSimulateDetailVO, ReplyVOPromoSimulateTotalVO } from \\"./definitions\\";

const { info } = console

export interface IPostApiDataboardBoardEsCreateIndexParam {
    body?: EsIndexAddDTO;
    formData: {
        file: File
        };
    query: {
        indexAlias: string
        indexNames: Array<string>
        };
}

/**
 * 创建索引
 */
export function postApiDataboardBoardEsCreateIndex(param: IPostApiDataboardBoardEsCreateIndexParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/es/createIndex', param)
                info('mock fetch: ', url)
                option.method = 'post'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":0,\\"message\\":\\"success\\"}) as Promise<ReplyVOInt>
              
}

export interface IDeleteApiDataboardBoardEsDelIndexParam {
    body?: Array<string>;
}

/**
 * 删除索引
 */
export function deleteApiDataboardBoardEsDelIndex(param: IDeleteApiDataboardBoardEsDelIndexParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/es/delIndex', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardBoardPriceCompeteExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        opponentCode?: string
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: string;
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceCompeteExportChart(param: IGetApiDataboardBoardPriceCompeteExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/exportChart', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"message\\":\\"success\\"}) as Promise<ReplyVOVoid>
              
}

export interface IGetApiDataboardBoardPriceCompeteListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        opponentCode?: string
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格竞争力-图表、列表】
 */
export function getApiDataboardBoardPriceCompeteList(param: IGetApiDataboardBoardPriceCompeteListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"chartData\\":[{\\"avgPriceHighDegree\\":12.5,\\"avgPriceLowDegree\\":12.5,\\"brandId\\":3290,\\"brandName\\":\\"飞利浦（PHILIPS）\\",\\"cid\\":1011,\\"cidName\\":\\"手机\\",\\"deptId\\":2789,\\"deptName\\":\\"电脑数码事业部\\",\\"dtime\\":\\"2019-01-01\\",\\"flatNum\\":906,\\"flatRate\\":35.5,\\"matchRate\\":34.5,\\"matchSkuNum\\":2604,\\"priceCompetePoint\\":107.38,\\"priceHighNum\\":698,\\"priceHighRate\\":27.5,\\"priceLowNum\\":1000,\\"priceLowRate\\":38.5,\\"saleSkuNum\\":7566,\\"salerErp\\":\\"gaozong1\\",\\"salerName\\":\\"高宗\\"}],\\"dtime\\":\\"string\\",\\"dtype\\":\\"string\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOChartResultVOPriceCompeteChartListVO>
              
}

export interface IGetApiDataboardBoardPriceCompeteShowSummaryParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询实时汇总数据【价格竞争力-实时数据(汇总部分)】
 */
export function getApiDataboardBoardPriceCompeteShowSummary(param: IGetApiDataboardBoardPriceCompeteShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceCompete/showSummary', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"avgPriceHighDegree\\":0.12,\\"dtime\\":\\"2019-01-01\\",\\"flatSkuNum\\":906,\\"flatSkuRate\\":0.35,\\"matchRate\\":0.34,\\"matchSkuNum\\":2604,\\"priceHighSkuNum\\":698,\\"priceHighSkuRate\\":0.27,\\"priceLowSkuNum\\":1000,\\"priceLowSkuRate\\":0.38,\\"saleSkuNum\\":7566},\\"message\\":\\"success\\"}) as Promise<ReplyVOPriceCompeteSumVO>
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisBrandListParam {
    query?: {
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 品牌下钻
 */
export function getApiDataboardBoardPriceEcAnalysisBrandList(param: IGetApiDataboardBoardPriceEcAnalysisBrandListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/brandList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"brandId\\":10001,\\"brandName\\":\\"可比克\\",\\"deptId\\":1,\\"deptName\\":\\"xxx\\",\\"doubleCount\\":100,\\"gmvCount\\":100,\\"gpCount\\":100,\\"otherCount\\":100,\\"potentialRate\\":100,\\"skuCount\\":100}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPriceEcAnalysisBrandVO>
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisCatListParam {
    query?: {
        catLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 品类下钻
 */
export function getApiDataboardBoardPriceEcAnalysisCatList(param: IGetApiDataboardBoardPriceEcAnalysisCatListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/catList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"cid\\":1,\\"cname\\":\\"xxx\\",\\"doubleCount\\":100,\\"gmvCount\\":100,\\"gpCount\\":100,\\"otherCount\\":100,\\"potentialRate\\":100,\\"skuCount\\":100}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPriceEcAnalysisCatVO>
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisDeptListParam {
    query?: {
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 部门下钻
 */
export function getApiDataboardBoardPriceEcAnalysisDeptList(param: IGetApiDataboardBoardPriceEcAnalysisDeptListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/deptList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"deptId\\":1,\\"deptName\\":\\"xxx\\",\\"doubleCount\\":100,\\"gmvCount\\":100,\\"gpCount\\":100,\\"otherCount\\":100,\\"potentialRate\\":100,\\"skuCount\\":100}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPriceEcAnalysisDeptVO>
              
}

/**
 * 首页指标
 */
export function getApiDataboardBoardPriceEcAnalysisHomeIndex() {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/homeIndex')
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"doubleCount\\":100,\\"ecCount\\":100,\\"ecHighCount\\":100,\\"ecLowCount\\":100,\\"gmvCount\\":100,\\"gpCount\\":100,\\"potentialCount\\":100,\\"updatedDate\\":\\"2018-01-01\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOPriceEcAnalysisHomeIndexVO>
              
}

export interface IGetApiDataboardBoardPriceEcAnalysisSalerListParam {
    query?: {
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 采销下钻
 */
export function getApiDataboardBoardPriceEcAnalysisSalerList(param: IGetApiDataboardBoardPriceEcAnalysisSalerListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/salerList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"doubleCount\\":100,\\"gmvCount\\":100,\\"gpCount\\":100,\\"otherCount\\":100,\\"potentialRate\\":100,\\"salerErp\\":\\"gaozong1\\",\\"salerName\\":\\"高宗\\",\\"skuCount\\":100}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPriceEcAnalysisSalerVO>
              
}

/**
 * 3个top1
 */
export function getApiDataboardBoardPriceEcAnalysisTop() {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceEcAnalysis/top')
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"doubleItem\\":{\\"brandId\\":10001,\\"brandName\\":\\"可比克\\",\\"cid\\":101,\\"cid1\\":101,\\"cid2\\":202,\\"cid3\\":303,\\"cname\\":\\"薯片\\",\\"cname1\\":\\"薯片\\",\\"cname2\\":\\"薯片\\",\\"cname3\\":\\"薯片\\",\\"cost\\":100,\\"ecBand\\":1,\\"gmv\\":10000,\\"gmvBand\\":\\"A\\",\\"gp\\":100,\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"pvBand\\":\\"A\\",\\"redPrice\\":19.9,\\"salerErp\\":\\"zhangsan\\",\\"sales\\":100,\\"salesBand\\":\\"A\\",\\"skuId\\":1001,\\"skuName\\":\\"可比克薯片\\"}},\\"message\\":\\"success\\"}) as Promise<ReplyVOPriceEcAnalysisTopVO>
              
}

export interface IGetApiDataboardBoardPriceHonestExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: string;
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceHonestExportChart(param: IGetApiDataboardBoardPriceHonestExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/exportChart', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardBoardPriceHonestExportListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
    body: string;
}

/**
 * 查看更多（导出）
 */
export function getApiDataboardBoardPriceHonestExportListSku(param: IGetApiDataboardBoardPriceHonestExportListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/exportListSku', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardBoardPriceHonestListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格诚信度-图表、列表】
 */
export function getApiDataboardBoardPriceHonestList(param: IGetApiDataboardBoardPriceHonestListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"chartData\\":[{\\"avgUpPriceDegree\\":33.5,\\"brandId\\":3290,\\"brandName\\":\\"飞利浦（PHILIPS）\\",\\"cid\\":1011,\\"cidName\\":\\"手机\\",\\"deptId\\":2789,\\"deptName\\":\\"电脑数码事业部\\",\\"dtime\\":\\"2019-01-01\\",\\"notUpPromoPriceNum\\":1486,\\"promoNum\\":2000,\\"promoRate\\":77.5,\\"promoSkuNum\\":2000,\\"promoUpPriceNumDown\\":400,\\"promoUpPriceNumUp\\":114,\\"promoUpPriceRate\\":57.5,\\"saleSkuNum\\":2604,\\"salerErp\\":\\"gaozong1\\",\\"salerName\\":\\"高宗\\"}],\\"dtime\\":\\"string\\",\\"dtype\\":\\"string\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOChartResultVOPriceHonestChartListVO>
              
}

export interface IGetApiDataboardBoardPriceHonestListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询T+1sku数据【价格竞争力T+1数据(sku部分)】
 */
export function getApiDataboardBoardPriceHonestListSku(param: IGetApiDataboardBoardPriceHonestListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/listSku', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"baselinePrice\\":19.92,\\"brandId\\":19,\\"brandName\\":\\"良品铺子\\",\\"gmvBand\\":\\"B\\",\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"promoIds\\":\\"111,222,333\\",\\"promoResultList\\":12.9,\\"pvBand\\":\\"C\\",\\"redPrice\\":19.92,\\"salesBand\\":\\"A\\",\\"skuId\\":1300239,\\"upPriceDegree\\":0.25}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPriceHonestSkuListVO>
              
}

export interface IGetApiDataboardBoardPriceHonestShowSummaryParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询T+1汇总数据【价格竞争力T+1数据(汇总部分)】
 */
export function getApiDataboardBoardPriceHonestShowSummary(param: IGetApiDataboardBoardPriceHonestShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceHonest/showSummary', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"dtime\\":\\"2019-01-01\\",\\"promoRate\\":77.5,\\"promoSkuNum\\":2000,\\"promoUpPriceRate\\":70.5,\\"promoUpPriceSkuNum\\":114,\\"saleSkuNum\\":2604,\\"upPriceDegree\\":33.5},\\"message\\":\\"success\\"}) as Promise<ReplyVOPriceHonestSumVO>
              
}

export interface IGetApiDataboardBoardPriceWaveExportChartParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
    body: string;
}

/**
 * 图表导出
 */
export function getApiDataboardBoardPriceWaveExportChart(param: IGetApiDataboardBoardPriceWaveExportChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/exportChart', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardBoardPriceWaveListParam {
    query?: {
        cidLevel?: number
        deptLevel?: number
        dtype?: string
        gmvBand?: Array<string>
        menuType?: number
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 图表查询【价格波动性-图表、列表】
 */
export function getApiDataboardBoardPriceWaveList(param: IGetApiDataboardBoardPriceWaveListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"chartData\\":[{\\"adjustPriceNum1\\":1000,\\"adjustPriceNum2\\":600,\\"adjustPriceNum3\\":47,\\"adjustPriceNumRate1\\":61.5,\\"adjustPriceNumRate2\\":36.5,\\"adjustPriceNumRate3\\":3.5,\\"brandId\\":3290,\\"brandName\\":\\"飞利浦（PHILIPS）\\",\\"cid\\":1011,\\"cidName\\":\\"手机\\",\\"deptId\\":2789,\\"deptName\\":\\"电脑数码事业部\\",\\"dtime\\":\\"2019-01-01\\",\\"priceWaveRate\\":0.03,\\"saleNum\\":1647,\\"salerErp\\":\\"gaozong1\\",\\"salerName\\":\\"高宗\\"}],\\"dtime\\":\\"string\\",\\"dtype\\":\\"string\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOChartResultVOPriceWaveChartListVO>
              
}

export interface IGetApiDataboardBoardPriceWaveListSkuParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询时间段内sku数据【价格波动性-时间段内数据(sku部分)】
 */
export function getApiDataboardBoardPriceWaveListSku(param: IGetApiDataboardBoardPriceWaveListSkuParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/listSku', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"adjustPriceTotalNum\\":32,\\"brandId\\":19,\\"brandName\\":\\"良品铺子\\",\\"cost\\":100,\\"ec\\":0.02,\\"ecTag\\":0.02,\\"gmvBand\\":\\"B\\",\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"personAdjustPriceNum\\":4,\\"potentialType\\":1,\\"potentialTypeDesc\\":1,\\"pvBand\\":\\"C\\",\\"redPrice\\":19.95,\\"salesBand\\":\\"A\\",\\"skuId\\":1300239,\\"sysAdjustPriceNum\\":18,\\"sysFollowPriceNum\\":10}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPriceWaveSkuListVO>
              
}

export interface IGetApiDataboardBoardPriceWaveShowSummaryParam {
    query?: {
        dtype?: string
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 查询时间段内汇总数据【价格波动性-时间段内数据(汇总部分)】
 */
export function getApiDataboardBoardPriceWaveShowSummary(param: IGetApiDataboardBoardPriceWaveShowSummaryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/priceWave/showSummary', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"adjustPriceSkuNum\\":10,\\"avgSkuUpPriceNum\\":32,\\"avgUpPriceDegree\\":0.4,\\"dtimeEnd\\":\\"2019-01-10\\",\\"dtimeStart\\":\\"2019-01-01\\",\\"personAdjustPriceNum\\":4,\\"personAdjustPriceTotalNum\\":4,\\"saleSkuNum\\":1647,\\"sysAdjustPriceNum\\":18,\\"sysAdjustPriceTotalNum\\":18,\\"sysFollowPriceNum\\":10,\\"sysFollowPriceTotalNum\\":10,\\"upPriceSkuNum\\":1647,\\"upPriceSkuNum1\\":1000,\\"upPriceSkuNum2\\":600,\\"upPriceSkuRate\\":5.5},\\"message\\":\\"success\\"}) as Promise<ReplyVOPriceWaveSumVO>
              
}

export interface IGetApiDataboardBoardPromoAnalysisBenchmarkingParam {
    query?: {
        cid?: number
        deptId?: string
        monthRange?: Array<string>
        };
}

/**
 * 对标均值
 */
export function getApiDataboardBoardPromoAnalysisBenchmarking(param: IGetApiDataboardBoardPromoAnalysisBenchmarkingParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/benchmarking', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"pureIncrementalRate\\":20,\\"realDiscount\\":20,\\"roi\\":1},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromoAnalysisSumVO>
              
}

export interface IGetApiDataboardBoardPromoAnalysisChartParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 明细分析(3张图表)
 */
export function getApiDataboardBoardPromoAnalysisChart(param: IGetApiDataboardBoardPromoAnalysisChartParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/chart', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"chart1\\":{\\"list\\":[{\\"children\\":[null],\\"gmv\\":10000,\\"gmvRate\\":40,\\"name\\":\\"有效促销\\",\\"sales\\":100,\\"type\\":1}]},\\"chart2\\":{\\"list\\":[{\\"avgDiscount\\":20,\\"baselineGmv\\":100,\\"cannGmv\\":100,\\"children\\":[null],\\"discountGmv\\":100,\\"haloGmv\\":100,\\"name\\":\\"有效促销\\",\\"pureIncremental\\":20,\\"pureIncrementalRate\\":20,\\"roi\\":30,\\"type\\":1,\\"upliftGmv\\":100}]},\\"chart3\\":{\\"list\\":[null]},\\"lastUpdate\\":\\"2019-01-01\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromoAnalysisChartVO>
              
}

/**
 * 获取所有部门
 */
export function getApiDataboardBoardPromoAnalysisDept() {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/dept')
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"children\\":[null],\\"level\\":1,\\"name\\":\\"ABC\\"}],\\"message\\":\\"success\\"}) as Promise<ReplyVOSetPromoDeptTreeVO>
              
}

/**
 * 首页指标
 */
export function getApiDataboardBoardPromoAnalysisHomeIndex() {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/homeIndex')
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"endTime\\":\\"2018-01-01\\",\\"incrementalRate\\":30,\\"promoCount\\":10,\\"promoInvalidCount\\":2,\\"promoNegativeCount\\":3,\\"promoPositiveCount\\":5,\\"roi\\":30,\\"skuCount\\":1000,\\"skuInvalidCount\\":200,\\"skuNegativeCount\\":300,\\"skuPositiveCount\\":500,\\"startTime\\":\\"2018-01-01\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromoAnalysisHomeIndexVO>
              
}

export interface IGetApiDataboardBoardPromoAnalysisPromoListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        promoDeptName?: string
        promoId?: number
        promoStatus?: number
        promoSubType?: number
        promoType?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 促销下钻
 */
export function getApiDataboardBoardPromoAnalysisPromoList(param: IGetApiDataboardBoardPromoAnalysisPromoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/promoList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"page\\":{\\"entities\\":[{\\"createdBy\\":\\"zhangsan\\",\\"dataEndTime\\":\\"2019-01-01\\",\\"dataStartTime\\":\\"2019-01-01\\",\\"deptName\\":\\"xxx\\",\\"parentQtty\\":200,\\"promoEndTime\\":\\"2019-01-01\\",\\"promoGmv\\":20000,\\"promoGmvRate\\":\\"67%\\",\\"promoId\\":1,\\"promoName\\":\\"蝴蝶节\\",\\"promoStartTime\\":\\"2019-01-01\\",\\"promoStatus\\":1,\\"promoStatusDesc\\":\\"已结束\\",\\"promoSubType\\":101,\\"promoSubTypeDesc\\":\\"秒杀\\",\\"promoType\\":1,\\"promoTypeDesc\\":\\"单品促销\\",\\"pureIncrementalRate\\":20,\\"realDiscount\\":20,\\"roi\\":1,\\"singlePrice\\":200,\\"skuCount\\":1000,\\"skuInvalidCount\\":200,\\"skuNegativeCount\\":300,\\"threshold\\":\\"300-30\\",\\"thresholdDesc\\":\\"每满300减30\\",\\"totalGmv\\":30000,\\"uv\\":200,\\"uvValue\\":200}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10}},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromoAnalysisPromoResultVO>
              
}

export interface IGetApiDataboardBoardPromoAnalysisPromoSkuListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        promoId?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        };
}

/**
 * 促销商品列表
 */
export function getApiDataboardBoardPromoAnalysisPromoSkuList(param: IGetApiDataboardBoardPromoAnalysisPromoSkuListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/promoSkuList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"avgRedPrice\\":200,\\"baselinePrice\\":200,\\"brandId\\":10001,\\"brandName\\":\\"可比克\\",\\"cid\\":101,\\"cid1\\":101,\\"cid2\\":202,\\"cid3\\":303,\\"cname\\":\\"薯片\\",\\"cname1\\":\\"薯片\\",\\"cname2\\":\\"薯片\\",\\"cname3\\":\\"薯片\\",\\"gmvBand\\":\\"A\\",\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"itemPrice\\":200,\\"priceHike\\":false,\\"promoFlag\\":1,\\"promoGmv\\":20000,\\"pureIncrementalRate\\":20,\\"pvBand\\":\\"A\\",\\"realDiscount\\":20,\\"roi\\":1,\\"salerErp\\":\\"zhangsan\\",\\"sales\\":100,\\"salesBand\\":\\"A\\",\\"skuId\\":1001,\\"skuName\\":\\"可比克薯片\\"}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOPromoAnalysisPromoSkuVO>
              
}

export interface IGetApiDataboardBoardPromoAnalysisSkuListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthRange?: Array<string>
        pageNo?: number
        pageSize?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: number
        };
}

/**
 * 商品下钻
 */
export function getApiDataboardBoardPromoAnalysisSkuList(param: IGetApiDataboardBoardPromoAnalysisSkuListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/promoAnalysis/skuList', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"page\\":{\\"entities\\":[{\\"brandId\\":10001,\\"brandName\\":\\"可比克\\",\\"cid\\":101,\\"cid1\\":101,\\"cid2\\":202,\\"cid3\\":303,\\"cname\\":\\"薯片\\",\\"cname1\\":\\"薯片\\",\\"cname2\\":\\"薯片\\",\\"cname3\\":\\"薯片\\",\\"deptId\\":1,\\"deptName\\":\\"xxx\\",\\"gmvBand\\":\\"A\\",\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"itemPrice\\":200,\\"promoCount\\":10,\\"promoGmv\\":20000,\\"promoGmvRate\\":\\"67%\\",\\"promoInvalidCount\\":2,\\"promoNegativeCount\\":3,\\"pureIncrementalRate\\":20,\\"pvBand\\":\\"A\\",\\"realDiscount\\":20,\\"roi\\":1,\\"salerErp\\":\\"zhangsan\\",\\"sales\\":100,\\"salesBand\\":\\"A\\",\\"skuId\\":1001,\\"skuName\\":\\"可比克薯片\\",\\"totalGmv\\":30000}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10}},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromoAnalysisSkuResultVO>
              
}

export interface IGetApiDataboardBoardReportTaskConfigIdParam {
    path?: {
        id?: number
        };
}

/**
 * 查看【报表任务】详情
 */
export function getApiDataboardBoardReportTaskConfigId(param: IGetApiDataboardBoardReportTaskConfigIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/config/:id', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"beginDate\\":\\"2018-12-12\\",\\"ccMail\\":\\"zhang@jd.com\\",\\"deptUnionId\\":\\"0_100_1100\\",\\"enabled\\":0,\\"endDate\\":\\"2018-12-20\\",\\"id\\":1,\\"opponentUnionId\\":\\"tmall_shop\\",\\"priceType\\":0,\\"sendTime\\":\\"9:00\\",\\"templateType\\":0,\\"timeType\\":0,\\"timingType\\":0,\\"toMail\\":\\"zhangbo65@jd.com\\"},\\"message\\":\\"success\\"}) as Promise<ReplyVOReportTaskShowVO>
              
}

export interface IDeleteApiDataboardBoardReportTaskDeleteBatchParam {
    body?: ReportTaskDeleteQO;
}

/**
 * 批量删除【报表任务】
 */
export function deleteApiDataboardBoardReportTaskDeleteBatch(param: IDeleteApiDataboardBoardReportTaskDeleteBatchParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/deleteBatch', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{},\\"message\\":\\"success\\"}) as Promise<ReplyVO>
              
}

export interface IGetApiDataboardBoardReportTaskInstanceListParam {
    query?: {
        pageNo?: number
        pageSize?: number
        taskId?: number
        };
}

/**
 * 查看【报表任务】执行详情
 */
export function getApiDataboardBoardReportTaskInstanceList(param: IGetApiDataboardBoardReportTaskInstanceListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/instance/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"beginTime\\":\\"2019-03-23 10:45:38\\",\\"endTime\\":\\"2019-03-23 10:45:38\\",\\"id\\":1,\\"planTime\\":\\"2019-03-23 10:45:38\\",\\"remark\\":\\"促销提价个数环比数据校验异常\\",\\"status\\":1,\\"taskId\\":1,\\"type\\":1}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOReportTaskInstanceVO>
              
}

export interface IGetApiDataboardBoardReportTaskListParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 分页查询【报表任务】
 */
export function getApiDataboardBoardReportTaskList(param: IGetApiDataboardBoardReportTaskListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"beginDate\\":\\"2018-12-12\\",\\"ccMail\\":\\"zhang@jd.com\\",\\"createdBy\\":\\"admin\\",\\"createdTime\\":\\"2017-12-07 00:00:00\\",\\"deptName\\":\\"消费品事业部\\",\\"deptUnionId\\":\\"0_10_11\\",\\"enabled\\":0,\\"endDate\\":\\"2018-12-20\\",\\"id\\":1,\\"operatedBy\\":\\"admin\\",\\"operatedTime\\":\\"修改时间【yyyy-MM-dd HH:mm:ss】\\",\\"opponentName\\":\\"天猫超市\\",\\"opponentUnionId\\":\\"tmall_shop\\",\\"sendTime\\":\\"9:00\\",\\"templateType\\":0,\\"timeType\\":0,\\"timingType\\":0,\\"toMail\\":\\"zhangbo65@jd.com\\"}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOReportTaskListVO>
              
}

export interface IPostApiDataboardBoardReportTaskRetryParam {
    body?: ReportRetryQO;
}

/**
 * 手动触发【报表任务】
 */
export function postApiDataboardBoardReportTaskRetry(param: IPostApiDataboardBoardReportTaskRetryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/retry', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiDataboardBoardReportTaskSaveParam {
    body?: ReportTaskAddDTO;
}

/**
 * 新增【报表任务】
 */
export function postApiDataboardBoardReportTaskSave(param: IPostApiDataboardBoardReportTaskSaveParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/save', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPutApiDataboardBoardReportTaskUpdateParam {
    body?: ReportTaskUpdateDTO;
}

/**
 * 修改【报表任务】
 */
export function putApiDataboardBoardReportTaskUpdate(param: IPutApiDataboardBoardReportTaskUpdateParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/reportTask/update', param)
                info('mock fetch: ', url)
                option.method = 'put'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardBoardSkuBlacklistParam {
    query?: {
        pageNo?: number
        pageSize?: number
        };
}

/**
 * 分页查询【sku黑名单设置】
 */
export function getApiDataboardBoardSkuBlacklist(param: IGetApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"createdBy\\":\\"张三\\",\\"createdTime\\":\\"2019-09-03T00:00:00.000Z\\",\\"createdTimeStr\\":\\"2018-12-01 20:12:12\\",\\"deptName1\\":\\"家电事业部\\",\\"deptName2\\":\\"手机业务部\\",\\"deptName3\\":\\"测试三级部门（勿用）\\",\\"skuId\\":110011}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOSkuBlacklistListVO>
              
}

export interface IPostApiDataboardBoardSkuBlacklistParam {
    body?: SkuBlacklistAddDTO;
}

/**
 * 新增【sku黑名单设置】
 */
export function postApiDataboardBoardSkuBlacklist(param: IPostApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IDeleteApiDataboardBoardSkuBlacklistParam {
    body?: SkuBlacklistDeleteQO;
}

/**
 * 批量删除【sku黑名单设置】
 */
export function deleteApiDataboardBoardSkuBlacklist(param: IDeleteApiDataboardBoardSkuBlacklistParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardBoardSkuBlacklistExportParam {
    query?: {
        exportEmail?: string
        };
}

/**
 * 导出【sku黑名单设置】
 */
export function getApiDataboardBoardSkuBlacklistExport(param: IGetApiDataboardBoardSkuBlacklistExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/skuBlacklist/export', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

/**
 * 分页查询【重点品牌监控设置】
 */
export function getApiDataboardBoardTopBrand() {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand')
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"brandId\\":1,\\"brandName\\":1,\\"id\\":1}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListTopBrandListVO>
              
}

export interface IPostApiDataboardBoardTopBrandParam {
    body: ListBrandVO;
}

/**
 * 新增【重点品牌监控设置】
 */
export function postApiDataboardBoardTopBrand(param: IPostApiDataboardBoardTopBrandParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IDeleteApiDataboardBoardTopBrandParam {
    path?: {
        id?: number
        };
    body: TopBrandDeleteQO;
}

/**
 * 按id查询【重点品牌监控设置】
 */
export function deleteApiDataboardBoardTopBrand(param: IDeleteApiDataboardBoardTopBrandParam) {

                const [ url, option ] = interceptRequest('/api/databoard/board/topBrand', param)
                info('mock fetch: ', url)
                option.method = 'delete'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPriceMarkdownSimulateCalcParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 建议价格计算接口
 */
export function getApiDataboardPriceMarkdownSimulateCalc(param: IGetApiDataboardPriceMarkdownSimulateCalcParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/calc', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"calcWarnMsg\\":\\"建议价格低于价格约束的最低价，无法在指定日期完成清滞\\",\\"markdownPriceCalcDetailVOS\\":[{\\"gmv\\":990,\\"gp\\":90,\\"priceDesc\\":\\"高概率达成清滞目标，降价幅度较大\\",\\"priceType\\":\\"80%清滞可能性\\",\\"saleQtty\\":123,\\"suggestPrice\\":9.9}],\\"skuId\\":100086},\\"message\\":\\"success\\"}) as Promise<ReplyVOMarkdownPriceCalcVO>
              
}

export interface IGetApiDataboardPriceMarkdownSimulateExportParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
    body: string;
}

/**
 * 历史量价明细导出
 */
export function getApiDataboardPriceMarkdownSimulateExport(param: IGetApiDataboardPriceMarkdownSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/export', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPriceMarkdownSimulateSaleParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 量价关系模拟接口
 */
export function getApiDataboardPriceMarkdownSimulateSale(param: IGetApiDataboardPriceMarkdownSimulateSaleParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/sale', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"markdownSaleSimulateDetailVOS\\":[{\\"avgQtty\\":5.6,\\"dealPrice\\":19.8,\\"maxQtty\\":9,\\"minQtty\\":3}],\\"points\\":[{\\"avgRedPrice\\":0,\\"dealPrice\\":0,\\"dt\\":\\"string\\",\\"lastRedPrice\\":0,\\"maxRedPrice\\":0,\\"minRedPrice\\":0,\\"ordQtty\\":0,\\"pv\\":0,\\"regularPrice\\":0,\\"saleQtty\\":0,\\"skuId\\":0,\\"uv\\":0}],\\"skuId\\":100086},\\"message\\":\\"success\\"}) as Promise<ReplyVOMarkdownSaleSimulateVO>
              
}

export interface IGetApiDataboardPriceMarkdownSimulateTrendParam {
    query?: {
        bottomPrice?: number
        cleanDays?: number
        pageNo?: number
        pageSize?: number
        pointPrice?: number
        skuId?: number
        stockNum?: number
        targetQtty?: number
        topPrice?: number
        };
}

/**
 * 清理量趋势预测接口
 */
export function getApiDataboardPriceMarkdownSimulateTrend(param: IGetApiDataboardPriceMarkdownSimulateTrendParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/trend', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"avgDealPrice28\\":58.8,\\"avgSales28\\":7.8,\\"finishDays\\":31,\\"forecastAvgSales\\":43.5,\\"meanPrice\\":33.6,\\"minDealPrice28\\":43.5,\\"pointPrice\\":35.6,\\"simulateTrend\\":[{\\"dtOrder\\":2,\\"waitQtty\\":600}],\\"skuId\\":100086,\\"suggestPrice\\":34.6},\\"message\\":\\"success\\"}) as Promise<ReplyVOMarkdownTrendSimulateVO>
              
}

export interface IGetApiDataboardPriceMarkdownSimulateSkuIdParam {
    path: {
        skuId: number
        };
}

/**
 * 查询sku详情
 */
export function getApiDataboardPriceMarkdownSimulateSkuId(param: IGetApiDataboardPriceMarkdownSimulateSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/markdownSimulate/:skuId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"avgMonthDealPrice\\":58.8,\\"avgMonthSaleQtty\\":7.8,\\"brandId\\":10001,\\"brandName\\":\\"可比克\\",\\"cbj\\":9.9,\\"cid\\":101,\\"cid1\\":101,\\"cid2\\":202,\\"cid3\\":303,\\"cname\\":\\"薯片\\",\\"cname1\\":\\"薯片\\",\\"cname2\\":\\"薯片\\",\\"cname3\\":\\"薯片\\",\\"dayAdjustPriceNum\\":5,\\"ec\\":-5.6,\\"ecTag\\":\\"高，低\\",\\"erpPrice\\":29.9,\\"gmv7\\":10000.9,\\"gmvBand\\":\\"A\\",\\"gp7\\":-113.5,\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"minMonthDealPrice\\":43.5,\\"monthAdjustPriceNum\\":5,\\"naturalMonthAdjustPriceNum\\":5,\\"potentialType\\":\\"1，2，3，4\\",\\"potentialTypeDesc\\":\\"无弹性无法计算销售潜力\\",\\"pvBand\\":\\"A\\",\\"redPrice\\":19.9,\\"saleQtty7\\":567,\\"salerErp\\":\\"zhangsan\\",\\"salesBand\\":\\"A\\",\\"skuId\\":1001,\\"skuName\\":\\"可比克薯片\\",\\"stockQtty\\":6000,\\"weekAdjustPriceNum\\":5},\\"message\\":\\"success\\"}) as Promise<ReplyVOSimulateSkuVO>
              
}

export interface IGetApiDataboardPriceSaleSimulateExportParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
    body: string;
}

/**
 * 历史量价明细导出
 */
export function getApiDataboardPriceSaleSimulateExport(param: IGetApiDataboardPriceSaleSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/export', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPriceSaleSimulateHistoryParam {
    query?: {
        endDt?: string
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDt?: string
        };
}

/**
 * 历史数据明细
 */
export function getApiDataboardPriceSaleSimulateHistory(param: IGetApiDataboardPriceSaleSimulateHistoryParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/history', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[null],\\"message\\":\\"success\\"}) as Promise<ReplyVOListSkuHistoryDTO>
              
}

export interface IGetApiDataboardPriceSaleSimulateListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        gmvBand?: Array<string>
        monthPriceChange?: number
        pageNo?: number
        pageSize?: number
        potentialType?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuIds?: string
        sortType?: string
        };
}

/**
 * 分页查询【销售优化模拟商品列表】
 */
export function getApiDataboardPriceSaleSimulateList(param: IGetApiDataboardPriceSaleSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[null],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOSimulateSkuVO>
              
}

export interface IGetApiDataboardPriceSaleSimulateShowTableParam {
    query?: {
        endDate?: string
        maxPrice?: number
        maxPv?: number
        minPrice?: number
        minPv?: number
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDate?: string
        };
}

/**
 * 按pv分段展示表格
 */
export function getApiDataboardPriceSaleSimulateShowTable(param: IGetApiDataboardPriceSaleSimulateShowTableParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/showTable', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"avgDealPrice\\":19.8,\\"avgGmv\\":590.89,\\"avgGp\\":-13.5,\\"avgOrdQtty\\":17.8,\\"avgSaleQtty\\":19.8,\\"dealPriceRange\\":\\"1000~2000\\",\\"pvConversionRate\\":0.056,\\"pvRange\\":\\"1000~2000\\",\\"skuId\\":100023,\\"uvConversionRate\\":0.046}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListSaleSimulateTableVO>
              
}

export interface IGetApiDataboardPriceSaleSimulateSimulateParam {
    query?: {
        endDate?: string
        maxPrice?: number
        maxPv?: number
        minPrice?: number
        minPv?: number
        pageNo?: number
        pageSize?: number
        skuId?: number
        startDate?: string
        };
}

/**
 * 销售优化模拟
 */
export function getApiDataboardPriceSaleSimulateSimulate(param: IGetApiDataboardPriceSaleSimulateSimulateParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/simulate', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"cbj\\":0,\\"drawPoints\\":[{\\"dealPrice\\":19.8,\\"pv\\":999,\\"saleQtty\\":37,\\"type\\":0}],\\"lineData\\":[null],\\"maxPv\\":2000,\\"minPv\\":2000,\\"skuId\\":100023},\\"message\\":\\"success\\"}) as Promise<ReplyVOSaleSimulateVO>
              
}

export interface IGetApiDataboardPriceSaleSimulateSkuIdParam {
    path: {
        skuId: number
        };
}

/**
 * 查询sku详情
 */
export function getApiDataboardPriceSaleSimulateSkuId(param: IGetApiDataboardPriceSaleSimulateSkuIdParam) {

                const [ url, option ] = interceptRequest('/api/databoard/price/saleSimulate/:skuId', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPromoRoExportParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 选品导出【Get方法】
 */
export function getApiDataboardPromoRoExport(param: IGetApiDataboardPromoRoExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/export', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IPostApiDataboardPromoRoExportParam {
    body: PromoRoQO;
}

/**
 * 选品导出【Post方法】
 */
export function postApiDataboardPromoRoExport(param: IPostApiDataboardPromoRoExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/export', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IPostApiDataboardPromoRoFindOverlayPromoParam {
    body: PromoOverlayRiskDTO;
}

/**
 * 查询sku有叠加风险的其他促销
 */
export function postApiDataboardPromoRoFindOverlayPromo(param: IPostApiDataboardPromoRoFindOverlayPromoParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/findOverlayPromo', param)
                info('mock fetch: ', url)
                option.method = 'post'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"adWord\\":\\"string\\",\\"checkState\\":0,\\"deleteState\\":true,\\"levelMember\\":0,\\"promoExtType\\":0,\\"promoId\\":0,\\"promoName\\":\\"string\\",\\"promoState\\":0,\\"promoType\\":0,\\"remark\\":\\"string\\",\\"source\\":0,\\"timeBegin\\":\\"2019-09-03T00:00:00.000Z\\",\\"timeEnd\\":\\"2019-09-03T00:00:00.000Z\\"}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListPromoResponse>
              
}

export interface IPostApiDataboardPromoRoFindOverlayRiskParam {
    body: PromoOverlayRiskDTO;
}

/**
 * 查询sku是否有叠加其他促销风险
 */
export function postApiDataboardPromoRoFindOverlayRisk(param: IPostApiDataboardPromoRoFindOverlayRiskParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/findOverlayRisk', param)
                info('mock fetch: ', url)
                option.method = 'post'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"additionalProp1\\":true,\\"additionalProp2\\":true,\\"additionalProp3\\":true},\\"message\\":\\"success\\"}) as Promise<ReplyVOMapLongBoolean>
              
}

export interface IGetApiDataboardPromoRoListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 查询选品【Get方法】
 */
export function getApiDataboardPromoRoList(param: IGetApiDataboardPromoRoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"blackSize\\":0,\\"blacklist\\":[{\\"baselinePrice\\":100,\\"blacklistRate\\":10,\\"brandId\\":10001,\\"brandName\\":\\"可比克\\",\\"cid\\":101,\\"cid1\\":101,\\"cid2\\":202,\\"cid3\\":303,\\"cname\\":\\"薯片\\",\\"cname1\\":\\"薯片\\",\\"cname2\\":\\"薯片\\",\\"cname3\\":\\"薯片\\",\\"cost\\":100,\\"gmvBand\\":\\"A\\",\\"hikeRatio\\":10,\\"hikeRisk\\":true,\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"jdPrice\\":100,\\"overlayRisk\\":true,\\"pvBand\\":\\"A\\",\\"realDiscount\\":10,\\"redPrice\\":100,\\"salerErp\\":\\"zhangsan\\",\\"salesBand\\":\\"A\\",\\"skuId\\":1001,\\"skuName\\":\\"可比克薯片\\",\\"stock\\":100,\\"stockTurnoverDay\\":10}],\\"fakeSize\\":0,\\"fakelist\\":[null],\\"whiteSize\\":0,\\"whitelist\\":[null]},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromoRoVO>
              
}

export interface IPostApiDataboardPromoRoListParam {
    body: PromoRoQO;
}

/**
 * 查询选品【Post方法】
 */
export function postApiDataboardPromoRoList(param: IPostApiDataboardPromoRoListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/list', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPromoRoSubTypesParam {
    query: {
        promoType: number
        };
}

/**
 * 根据促销类型查询促销子类型列表
 */
export function getApiDataboardPromoRoSubTypes(param: IGetApiDataboardPromoRoSubTypesParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/ro/subTypes', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":[{\\"label\\":\\"string\\",\\"value\\":0}],\\"message\\":\\"success\\"}) as Promise<ReplyVOListSelectOptionVOInt>
              
}

export interface IGetApiDataboardPromoSimulateExportParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 模拟导出【Get方法】
 */
export function getApiDataboardPromoSimulateExport(param: IGetApiDataboardPromoSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/export', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IPostApiDataboardPromoSimulateExportParam {
    body: PromoRoQO;
}

/**
 * 模拟导出【Post方法】
 */
export function postApiDataboardPromoSimulateExport(param: IPostApiDataboardPromoSimulateExportParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/export', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPromoSimulateListParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 效果模拟【Get方法】
 */
export function getApiDataboardPromoSimulateList(param: IGetApiDataboardPromoSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/list', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"entities\\":[{\\"baselineGmv\\":10000,\\"baselinePrice\\":100,\\"baselineSales\\":100,\\"brandId\\":10001,\\"brandName\\":\\"可比克\\",\\"cid\\":101,\\"cid1\\":101,\\"cid2\\":202,\\"cid3\\":303,\\"cname\\":\\"薯片\\",\\"cname1\\":\\"薯片\\",\\"cname2\\":\\"薯片\\",\\"cname3\\":\\"薯片\\",\\"cost\\":100,\\"gmvBand\\":\\"A\\",\\"gmvSimulation\\":10000,\\"gpSimulation\\":2000,\\"hikeRatio\\":10,\\"hikeRisk\\":true,\\"imgPath\\":\\"jfs/t1/24612/24/11553/102913/5c9055caE6402c10a/a76d038aed78e11e.jpg\\",\\"jdPrice\\":100,\\"overlayRisk\\":true,\\"pvBand\\":\\"A\\",\\"realDiscount\\":10,\\"redPrice\\":100,\\"salerErp\\":\\"zhangsan\\",\\"salesBand\\":\\"A\\",\\"salesSimulation\\":100,\\"skuId\\":1001,\\"skuName\\":\\"可比克薯片\\",\\"stock\\":100,\\"stockTurnoverDay\\":10}],\\"entityCount\\":100,\\"firstEntityIndex\\":0,\\"lastEntityIndex\\":10,\\"pageCount\\":10,\\"pageNo\\":1,\\"pageSize\\":10},\\"message\\":\\"success\\"}) as Promise<ReplyVOPageVOPromoSimulateDetailVO>
              
}

export interface IPostApiDataboardPromoSimulateListParam {
    body: PromoRoQO;
}

/**
 * 效果模拟【Post方法】
 */
export function postApiDataboardPromoSimulateList(param: IPostApiDataboardPromoSimulateListParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/list', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPromoSimulateSubTypesParam {
    query: {
        promoType: number
        };
}

/**
 * 根据促销类型查询促销子类型列表
 */
export function getApiDataboardPromoSimulateSubTypes(param: IGetApiDataboardPromoSimulateSubTypesParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/subTypes', param)
                info('mock fetch: ', url)
                option.method = 'get'
                Promise.resolve(new Response())
              
}

export interface IGetApiDataboardPromoSimulateTotalParam {
    query?: {
        brandId?: Array<number>
        cid?: Array<number>
        cidLevel?: number
        deptId?: string
        deptLevel?: number
        endDate?: string
        gmvBand?: Array<string>
        pageNo?: number
        pageSize?: number
        plan?: number
        promoSubType1?: number
        promoSubType2?: number
        promoType1?: number
        promoType2?: number
        pvBand?: Array<string>
        salesBand?: Array<string>
        skuId?: string
        startDate?: string
        threshold1?: string
        threshold2?: string
        };
}

/**
 * 效果模拟汇总【Get方法】
 */
export function getApiDataboardPromoSimulateTotal(param: IGetApiDataboardPromoSimulateTotalParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/total', param)
                info('mock fetch: ', url)
                option.method = 'get'
                return Promise.resolve({\\"code\\":\\"000000\\",\\"data\\":{\\"gmvSimulation\\":10000,\\"salesSimulation\\":100},\\"message\\":\\"success\\"}) as Promise<ReplyVOPromoSimulateTotalVO>
              
}

export interface IPostApiDataboardPromoSimulateTotalParam {
    body: PromoRoQO;
}

/**
 * 效果模拟汇总【Post方法】
 */
export function postApiDataboardPromoSimulateTotal(param: IPostApiDataboardPromoSimulateTotalParam) {

                const [ url, option ] = interceptRequest('/api/databoard/promo/simulate/total', param)
                info('mock fetch: ', url)
                option.method = 'post'
                Promise.resolve(new Response())
              
}
"
`;
